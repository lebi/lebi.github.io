{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/img/DST2.jpg","path":"img/DST2.jpg","modified":1,"renderable":0},{"_id":"source/img/DST5.jpg","path":"img/DST5.jpg","modified":1,"renderable":0},{"_id":"source/img/DST3.jpg","path":"img/DST3.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"source/img/DST4.jpg","path":"img/DST4.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":1,"renderable":1},{"_id":"source/img/DST1.png","path":"img/DST1.png","modified":1,"renderable":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1465278803778},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1465278803779},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1465278803781},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1465278803783},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1465278803782},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1465278803782},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1465278803786},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1465278803832},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1465278803784},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1465278803786},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1465278803785},{"_id":"themes/next/_config.yml","hash":"56acaa4cc72abc258a28c41d0d59f9c9bc468635","modified":1465298185940},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1465278803780},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1465278803781},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1465278803832},{"_id":"source/favicon.ico","hash":"4363ab57f235efaa9fe7cb89eb335227ebdd54fe","modified":1465292133513},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1465278803975},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1465278803758},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1465278803766},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1465278632163},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1465278803976},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1465278803976},{"_id":"themes/next/.git/index","hash":"3a1e6b6e05a1df74a48456d72a0049152fd25d3f","modified":1465278803976},{"_id":"themes/next/.git/packed-refs","hash":"7f4161b43d037e87055ad4e2f3388eecbca0c75a","modified":1465278803745},{"_id":"source/tags/index.md","hash":"25285537bee0e2535ac168b6f449bea55b06617e","modified":1465298963335},{"_id":"source/categories/index.md","hash":"1802f754144778f48436ca992923aa2bc0b41935","modified":1465291246175},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1465278803795},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1465278803829},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1465278803827},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1465278803828},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1465278803829},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1465278803829},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1465278803831},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1465278803787},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1465278803788},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1465278803789},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1465278803789},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1465278803790},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1465278803790},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1465278803788},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1465278803793},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1465278803794},{"_id":"source/img/DST2.jpg","hash":"605bd213750c7b4bb44e8875e2cb316332288e7b","modified":1465896386907},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1465294858480},{"_id":"source/_posts/leetcode10.md","hash":"661cea59dfa53712f9f858120f90d08829d295c6","modified":1466050956102},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1465278803794},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1465278803793},{"_id":"source/img/DST5.jpg","hash":"fc4906bca9b9134c52e33d9456d02d0811db98a6","modified":1465897601387},{"_id":"source/img/DST3.jpg","hash":"0f73ea9960206df4fd2e3a8caceceb3c08251468","modified":1465896485604},{"_id":"source/_posts/leetcode4.md","hash":"e43773da4ea241ccb65fb87bbf4898780b1f9205","modified":1466050975529},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465278803904},{"_id":"source/_posts/leetcode25.md","hash":"dc5ea6f919f7de0c653460015197b7a6dc67a3c7","modified":1466151907778},{"_id":"source/_posts/饥荒独立服务器搭建.md","hash":"d46d4fd5b7c9ff4abf7fec64f14782c91f7672da","modified":1466337686840},{"_id":"source/_posts/leetcode23.md","hash":"b1e5579884dfd074aaed8a48706df04fe3f44c77","modified":1466052479183},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1465278803833},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1465278803834},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1465278803834},{"_id":"source/_posts/leetcode30.md","hash":"ddd13ca36d2e6ce838dbb106837ffa08e0ce48a7","modified":1466061990854},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1465278632169},{"_id":"themes/next/.git/logs/HEAD","hash":"574327e157c6cf92a9f01ed1385f855ff71f611f","modified":1465278803763},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1465278803903},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1465278803905},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1465278803906},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1465278803906},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1465278803909},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1465278803907},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1465278803909},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1465278803910},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465278803911},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465278803911},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1465278803911},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1465278803912},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1465278803913},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1465278632164},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1465278632165},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1465278632165},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1465278632166},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1465278803909},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1465278632167},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1465278632168},{"_id":"source/img/DST4.jpg","hash":"a76b60f6cb98b246cef084e8db2e729dd467fdc9","modified":1465897499396},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1465278632167},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1465278803797},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1465278632164},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1465278632166},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1465278803799},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1465278803798},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1465278803800},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5d84f3938e99f1908a6a1d44dd530740625f0188","modified":1465278803800},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1465278803801},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1465278803803},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1465278803806},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1465278803806},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1465278803797},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1465278803805},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1465278803811},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1465278803811},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1465278803812},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1465278803796},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1465278803920},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1465278803921},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1465278803914},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1465278803915},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1465278803915},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1465278803915},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1465278803827},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1465278803959},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1465278803919},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1465278803932},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1465278803916},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1465278803936},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1465278803918},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1465278803939},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1465278803940},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1465278803940},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1465278803941},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1465278803939},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1465278803963},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1465278803963},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1465278803964},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1465278803933},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1465278803964},{"_id":"themes/next/.git/refs/heads/master","hash":"a168e3334726cb2b1dcca9bb92e145ab4630ddd9","modified":1465278803760},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465278803815},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465278803816},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465278803880},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465278803880},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465278803882},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1465278803965},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1465278803879},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1465278803932},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1465278803962},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1465278803968},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1465278803969},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465278803902},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465278803900},{"_id":"source/img/DST1.png","hash":"2198b8c6493adb7c5c7377815beb96f35f8560df","modified":1465895414393},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1465278803973},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1465278803807},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1465278803807},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1465278803808},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1465278803974},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1465278803974},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1465278803961},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1465278803815},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1465278803817},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1465278803881},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1465278803805},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1465278803881},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1465278803900},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1465278803901},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1465278803808},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1465278803809},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1465278803818},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1465278803823},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1465278803809},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1465278803810},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1465278803825},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465278803922},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465278803922},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1465278803902},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1465278803825},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465278803924},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465278803923},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465278803925},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465278803924},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1465278803931},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1465278803931},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1465278803918},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1465278803826},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1465278803826},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1465278803938},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1465278803966},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"574327e157c6cf92a9f01ed1385f855ff71f611f","modified":1465278803762},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1465278803749},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1465278803967},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1465278803937},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1465278803930},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1465278803944},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1465278803943},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1465278803958},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1465278803942},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1465278803836},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1465278803837},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1465278803838},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1465278803848},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1465278803865},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1465278803883},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1465278803885},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1465278803837},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1465278803874},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1465278803885},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1465278803889},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1465278803891},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1465278803889},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1465278803892},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1465278803892},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1465278803886},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1465278803887},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1465278803893},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1465278803893},{"_id":"themes/next/.git/objects/pack/pack-7000993c238bf29c63b3b0a8b676fa8e9b68a1ac.idx","hash":"c98589f4d7d609ffa4192bb888b501c060e9495a","modified":1465278803545},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1465278803895},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1465278803895},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1465278803898},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1465278803899},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1465278803896},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1465278803899},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1465278803898},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1465278803876},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1465278803875},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1465278803878},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1465278803948},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1465278803949},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1465278803878},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1465278803877},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1465278803957},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1465278803970},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1465278803819},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1465278803821},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1465278803821},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1465278803822},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1465278803822},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1465278803824},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1465278803824},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465278803926},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1465278803927},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1465278803928},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1465278803928},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"574327e157c6cf92a9f01ed1385f855ff71f611f","modified":1465278803757},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1465278803929},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1465278803929},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1465278803820},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1465278803956},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1465278803839},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1465278803849},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1465278803852},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1465278803842},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1465278803853},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1465278803843},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1465278803853},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1465278803852},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1465278803854},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1465278803854},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1465278803856},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1465278803855},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1465278803843},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1465278803844},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1465278803844},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1465278803847},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1465278803856},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1465278803866},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1465278803866},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1465278803868},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1465278803890},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1465278803891},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1465278803868},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1465278803839},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1465278803840},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1465278803894},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1465278803849},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1465278803841},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1465278803858},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1465278803851},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1465278803860},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1465278803860},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1465278803859},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1465278803860},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1465278803862},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1465278803862},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1465278803863},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1465278803869},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1465278803863},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1465278803869},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1465278803871},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1465278803840},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1465278803873},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1465278803841},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1465278803870},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1465278803871},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1465278803953},{"_id":"themes/next/.git/objects/pack/pack-7000993c238bf29c63b3b0a8b676fa8e9b68a1ac.pack","hash":"f3131f35f0e2c9188c57b72201f511faf9724114","modified":1465278803618},{"_id":"public/categories/index.html","hash":"88a0c1e394cbe5db5dd4fa7c7b05b1d1e32e2f1a","modified":1475075322473},{"_id":"public/2016/06/07/hello-world/index.html","hash":"0b557ae95fbfada5577af6bc68ccc667d3e34530","modified":1475075322492},{"_id":"public/tags/index.html","hash":"586c9c18e69cf9a466a364f657282c4caa28d9a6","modified":1475075322492},{"_id":"public/archives/2016/index.html","hash":"0518f8e908049461d4e5dec84230ac1c872052e9","modified":1475075322492},{"_id":"public/tags/leetcode/index.html","hash":"984d03cf664874753c69d067dd6865835b2a1a26","modified":1475075322493},{"_id":"public/tags/games/index.html","hash":"04bfd939dcdc2c6371bae8fcee00082c0735b49b","modified":1475075322493},{"_id":"public/archives/2016/06/index.html","hash":"c6c0881da12c9dc9efe3d925bd1301f6dcfc7ccb","modified":1475075322493},{"_id":"public/archives/index.html","hash":"921d6da311d5b9e9ae4543267703fd854c6c0d99","modified":1475075322493},{"_id":"public/2016/06/17/leetcode25/index.html","hash":"94394fa5e7a9a0ee5c51d51524063d65a6db8757","modified":1475075322493},{"_id":"public/2016/06/14/饥荒独立服务器搭建/index.html","hash":"55f331dee83a0a7dc309907a20c19268073880a4","modified":1475075322493},{"_id":"public/2016/06/08/leetcode10/index.html","hash":"e265edf022e62706f4d915c79c4810961ceb636f","modified":1475075322494},{"_id":"public/2016/06/07/leetcode4/index.html","hash":"24b92ae525dd8ceabe1afffed15ec3b6ec9dd44a","modified":1475075322494},{"_id":"public/2016/06/16/leetcode23/index.html","hash":"aab880df4c24764e814e34c5f8728b6241d274a6","modified":1475075322494},{"_id":"public/index.html","hash":"6140217b4acb708df22ee60cd875a553c30033ca","modified":1475075322494},{"_id":"public/2016/06/16/leetcode30/index.html","hash":"60f7a32c8e4e5f051883433d02b60cbdae5f1949","modified":1475075322494},{"_id":"public/img/DST2.jpg","hash":"605bd213750c7b4bb44e8875e2cb316332288e7b","modified":1475075322503},{"_id":"public/img/DST5.jpg","hash":"fc4906bca9b9134c52e33d9456d02d0811db98a6","modified":1475075322503},{"_id":"public/img/DST3.jpg","hash":"0f73ea9960206df4fd2e3a8caceceb3c08251468","modified":1475075322504},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1475075322504},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1475075322504},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1475075322505},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1475075322505},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1475075322505},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1475075322505},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1475075322506},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1475075322506},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1475075322506},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1475075322506},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1475075322506},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1475075322506},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1475075322506},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1475075322506},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1475075322507},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1475075322507},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1475075322507},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1475075322507},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1475075322507},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1475075322507},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1475075322507},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1475075322507},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1475075322507},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1475075322507},{"_id":"public/favicon.ico","hash":"4363ab57f235efaa9fe7cb89eb335227ebdd54fe","modified":1475075328495},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1475075328496},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1475075328505},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1475075328506},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1475075328518},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1475075328518},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1475075328518},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1475075328518},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1475075328518},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1475075328518},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1475075328518},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1475075328518},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1475075328518},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1475075328519},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1475075328519},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1475075328519},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1475075328519},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1475075328519},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1475075328519},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1475075328519},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1475075328519},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1475075328519},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1475075328519},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1475075328519},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1475075328519},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1475075328519},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1475075328520},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1475075328520},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1475075328520},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1475075328520},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1475075328520},{"_id":"public/css/main.css","hash":"1031f091d0aec850690f3bac58aa7263e19521a3","modified":1475075328520},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1475075328520},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1475075328520},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1475075328520},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1475075328520},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1475075328520},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1475075328520},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1475075328521},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1475075328521},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1475075328521},{"_id":"public/img/DST4.jpg","hash":"a76b60f6cb98b246cef084e8db2e729dd467fdc9","modified":1475075328521},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1475075328521},{"_id":"public/img/DST1.png","hash":"2198b8c6493adb7c5c7377815beb96f35f8560df","modified":1475075328578},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1475075328588}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2016-06-07T09:17:05.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-07 17:17:05\ntype: \"tags\"\ncomments: false\n---","updated":"2016-06-07T11:29:23.335Z","path":"tags/index.html","layout":"page","_id":"citn1rcb40000vcqrgdriu4n6","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-06-07T09:20:17.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-06-07 17:20:17\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-06-07T09:20:46.175Z","path":"categories/index.html","layout":"page","_id":"citn1rcb70001vcqroophxwkn","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-06-07T05:26:02.135Z","updated":"2016-06-07T10:20:58.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citn1rchh0002vcqrvuhcxzxt","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Regular Expression Matching","date":"2016-06-08T05:30:23.000Z","_content":"## Leetcode: Regular Expression Matching\nImplement regular expression matching with support for '.' and '*'.  \n>'.' Matches any single character.  \n'*' Matches zero or more of the preceding element.  \nThe matching should cover the entire input string (not partial).The function prototype should be:bool isMatch(const char *s, const char *p)  \nSome examples:  \nisMatch(\"aa\",\"a\") → false  \nisMatch(\"aa\",\"aa\") → true  \nisMatch(\"aaa\",\"aa\") → false  \nisMatch(\"aa\", \"a*\") → true  \nisMatch(\"aa\", \".*\") → true  \nisMatch(\"ab\", \".*\") → true  \nisMatch(\"aab\", \"c*a*b\") → true\n\n## 题意\n实现正则表达式中的'.'和'*'，输入两个字符串，返回是否匹配。\n\n## 解题思路\n&emsp;&emsp;使用DFS的方法，主要思路就是例如当a\\*ab和aaab进行匹配时，第一个字符匹配且第二个字符为\\*，那么先令ab和aaab进行匹配。因为ab和aaab匹配失败，再回溯到之前，并将s串后移一位，即匹配a\\*ab和aab。使用递归，这就是一个很典型的DFS的实现。  \n&emsp;&emsp;在实现时需要考虑几个特殊的测试用例：当s串为空；当p串为空。  \n&emsp;&emsp;使用回溯的做法，当输入类似为a\\*aab和aaaab时，需要进行多次的回溯，时间复杂度是O(n!)，最后算法在leetcode上提交约在50%。\n#### 代码实现\n```java\n\tpublic boolean check(char[] s,int s1,char[] p,int p1){\n\t\tint slen=s.length-s1,plen=p.length-p1;\n\t\t//s串为空，例如''和'a*c'\n    \tif(slen==0){\n    \t\tif(plen%2!=0)\n    \t\t\treturn false;\n    \t\tfor(int i=p1+1;i<p.length;i+=2)\n    \t\t\tif(p[i]!='*')\n    \t\t\t\treturn false;\n    \t\treturn true;\n    \t}\n    \t\n    \tif(plen==0)\n    \t\treturn false;\n    \t\n    \tif(plen==1)\n    \t\tif(slen==1&&(s[s1]==p[p1]||p[p1]=='.'))\n    \t\t\treturn true;\n    \t\telse\n    \t\t\treturn false;\n    \t\n    \tif(p[p1+1]!='*'){\n        \tif(p[p1]=='.'||p[p1]==s[s1])\n        \t\treturn check(s,s1+1, p,p1+1);\n        \telse return false;\n    \t}\n    \tif(p[p1]=='.'||p[p1]==s[s1])\n    \t\tif(check(s, s1,p,p1+2))\n    \t\t\treturn true;\n    \t\telse\n    \t\t\treturn check(s,s1+1, p,p1);\n    \telse\n    \t\treturn check(s,s1, p,p1+2);\n\t}\n    public boolean isMatch(String s, String p) {\n    \treturn check(s.toCharArray(),0,p.toCharArray(),0);\n    }\n```","source":"_posts/leetcode10.md","raw":"---\ntitle: Regular Expression Matching\ndate: 2016-06-08 13:30:23\ntags: [leetcode]\n---\n## Leetcode: Regular Expression Matching\nImplement regular expression matching with support for '.' and '*'.  \n>'.' Matches any single character.  \n'*' Matches zero or more of the preceding element.  \nThe matching should cover the entire input string (not partial).The function prototype should be:bool isMatch(const char *s, const char *p)  \nSome examples:  \nisMatch(\"aa\",\"a\") → false  \nisMatch(\"aa\",\"aa\") → true  \nisMatch(\"aaa\",\"aa\") → false  \nisMatch(\"aa\", \"a*\") → true  \nisMatch(\"aa\", \".*\") → true  \nisMatch(\"ab\", \".*\") → true  \nisMatch(\"aab\", \"c*a*b\") → true\n\n## 题意\n实现正则表达式中的'.'和'*'，输入两个字符串，返回是否匹配。\n\n## 解题思路\n&emsp;&emsp;使用DFS的方法，主要思路就是例如当a\\*ab和aaab进行匹配时，第一个字符匹配且第二个字符为\\*，那么先令ab和aaab进行匹配。因为ab和aaab匹配失败，再回溯到之前，并将s串后移一位，即匹配a\\*ab和aab。使用递归，这就是一个很典型的DFS的实现。  \n&emsp;&emsp;在实现时需要考虑几个特殊的测试用例：当s串为空；当p串为空。  \n&emsp;&emsp;使用回溯的做法，当输入类似为a\\*aab和aaaab时，需要进行多次的回溯，时间复杂度是O(n!)，最后算法在leetcode上提交约在50%。\n#### 代码实现\n```java\n\tpublic boolean check(char[] s,int s1,char[] p,int p1){\n\t\tint slen=s.length-s1,plen=p.length-p1;\n\t\t//s串为空，例如''和'a*c'\n    \tif(slen==0){\n    \t\tif(plen%2!=0)\n    \t\t\treturn false;\n    \t\tfor(int i=p1+1;i<p.length;i+=2)\n    \t\t\tif(p[i]!='*')\n    \t\t\t\treturn false;\n    \t\treturn true;\n    \t}\n    \t\n    \tif(plen==0)\n    \t\treturn false;\n    \t\n    \tif(plen==1)\n    \t\tif(slen==1&&(s[s1]==p[p1]||p[p1]=='.'))\n    \t\t\treturn true;\n    \t\telse\n    \t\t\treturn false;\n    \t\n    \tif(p[p1+1]!='*'){\n        \tif(p[p1]=='.'||p[p1]==s[s1])\n        \t\treturn check(s,s1+1, p,p1+1);\n        \telse return false;\n    \t}\n    \tif(p[p1]=='.'||p[p1]==s[s1])\n    \t\tif(check(s, s1,p,p1+2))\n    \t\t\treturn true;\n    \t\telse\n    \t\t\treturn check(s,s1+1, p,p1);\n    \telse\n    \t\treturn check(s,s1, p,p1+2);\n\t}\n    public boolean isMatch(String s, String p) {\n    \treturn check(s.toCharArray(),0,p.toCharArray(),0);\n    }\n```","slug":"leetcode10","published":1,"updated":"2016-06-16T04:22:36.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citn1rchq0003vcqrpy4vwux2","content":"<h2 id=\"Leetcode-Regular-Expression-Matching\"><a href=\"#Leetcode-Regular-Expression-Matching\" class=\"headerlink\" title=\"Leetcode: Regular Expression Matching\"></a>Leetcode: Regular Expression Matching</h2><p>Implement regular expression matching with support for ‘.’ and ‘*’.  </p>\n<blockquote>\n<p>‘.’ Matches any single character.<br>‘<em>‘ Matches zero or more of the preceding element.<br>The matching should cover the entire input string (not partial).The function prototype should be:bool isMatch(const char </em>s, const char <em>p)<br>Some examples:<br>isMatch(“aa”,”a”) → false<br>isMatch(“aa”,”aa”) → true<br>isMatch(“aaa”,”aa”) → false<br>isMatch(“aa”, “a</em>“) → true<br>isMatch(“aa”, “.<em>“) → true<br>isMatch(“ab”, “.</em>“) → true<br>isMatch(“aab”, “c<em>a</em>b”) → true</p>\n</blockquote>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>实现正则表达式中的’.’和’*’，输入两个字符串，返回是否匹配。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;&emsp;使用DFS的方法，主要思路就是例如当a*ab和aaab进行匹配时，第一个字符匹配且第二个字符为*，那么先令ab和aaab进行匹配。因为ab和aaab匹配失败，再回溯到之前，并将s串后移一位，即匹配a*ab和aab。使用递归，这就是一个很典型的DFS的实现。<br>&emsp;&emsp;在实现时需要考虑几个特殊的测试用例：当s串为空；当p串为空。<br>&emsp;&emsp;使用回溯的做法，当输入类似为a*aab和aaaab时，需要进行多次的回溯，时间复杂度是O(n!)，最后算法在leetcode上提交约在50%。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">char</span>[] s,<span class=\"keyword\">int</span> s1,<span class=\"keyword\">char</span>[] p,<span class=\"keyword\">int</span> p1)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> slen=s.length-s1,plen=p.length-p1;</span><br><span class=\"line\">\t<span class=\"comment\">//s串为空，例如''和'a*c'</span></span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(slen==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">if</span>(plen%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=p1+<span class=\"number\">1</span>;i&lt;p.length;i+=<span class=\"number\">2</span>)</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">if</span>(p[i]!=<span class=\"string\">'*'</span>)</span><br><span class=\"line\">   \t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(plen==<span class=\"number\">0</span>)</span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(plen==<span class=\"number\">1</span>)</span><br><span class=\"line\">   \t\t<span class=\"keyword\">if</span>(slen==<span class=\"number\">1</span>&amp;&amp;(s[s1]==p[p1]||p[p1]==<span class=\"string\">'.'</span>))</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(p[p1+<span class=\"number\">1</span>]!=<span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">if</span>(p[p1]==<span class=\"string\">'.'</span>||p[p1]==s[s1])</span><br><span class=\"line\">       \t\t<span class=\"keyword\">return</span> check(s,s1+<span class=\"number\">1</span>, p,p1+<span class=\"number\">1</span>);</span><br><span class=\"line\">       \t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(p[p1]==<span class=\"string\">'.'</span>||p[p1]==s[s1])</span><br><span class=\"line\">   \t\t<span class=\"keyword\">if</span>(check(s, s1,p,p1+<span class=\"number\">2</span>))</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> check(s,s1+<span class=\"number\">1</span>, p,p1);</span><br><span class=\"line\">   \t<span class=\"keyword\">else</span></span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> check(s,s1, p,p1+<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span> check(s.toCharArray(),<span class=\"number\">0</span>,p.toCharArray(),<span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Leetcode-Regular-Expression-Matching\"><a href=\"#Leetcode-Regular-Expression-Matching\" class=\"headerlink\" title=\"Leetcode: Regular Expression Matching\"></a>Leetcode: Regular Expression Matching</h2><p>Implement regular expression matching with support for ‘.’ and ‘*’.  </p>\n<blockquote>\n<p>‘.’ Matches any single character.<br>‘<em>‘ Matches zero or more of the preceding element.<br>The matching should cover the entire input string (not partial).The function prototype should be:bool isMatch(const char </em>s, const char <em>p)<br>Some examples:<br>isMatch(“aa”,”a”) → false<br>isMatch(“aa”,”aa”) → true<br>isMatch(“aaa”,”aa”) → false<br>isMatch(“aa”, “a</em>“) → true<br>isMatch(“aa”, “.<em>“) → true<br>isMatch(“ab”, “.</em>“) → true<br>isMatch(“aab”, “c<em>a</em>b”) → true</p>\n</blockquote>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>实现正则表达式中的’.’和’*’，输入两个字符串，返回是否匹配。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;&emsp;使用DFS的方法，主要思路就是例如当a*ab和aaab进行匹配时，第一个字符匹配且第二个字符为*，那么先令ab和aaab进行匹配。因为ab和aaab匹配失败，再回溯到之前，并将s串后移一位，即匹配a*ab和aab。使用递归，这就是一个很典型的DFS的实现。<br>&emsp;&emsp;在实现时需要考虑几个特殊的测试用例：当s串为空；当p串为空。<br>&emsp;&emsp;使用回溯的做法，当输入类似为a*aab和aaaab时，需要进行多次的回溯，时间复杂度是O(n!)，最后算法在leetcode上提交约在50%。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">char</span>[] s,<span class=\"keyword\">int</span> s1,<span class=\"keyword\">char</span>[] p,<span class=\"keyword\">int</span> p1)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> slen=s.length-s1,plen=p.length-p1;</span><br><span class=\"line\">\t<span class=\"comment\">//s串为空，例如''和'a*c'</span></span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(slen==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">if</span>(plen%<span class=\"number\">2</span>!=<span class=\"number\">0</span>)</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=p1+<span class=\"number\">1</span>;i&lt;p.length;i+=<span class=\"number\">2</span>)</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">if</span>(p[i]!=<span class=\"string\">'*'</span>)</span><br><span class=\"line\">   \t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(plen==<span class=\"number\">0</span>)</span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(plen==<span class=\"number\">1</span>)</span><br><span class=\"line\">   \t\t<span class=\"keyword\">if</span>(slen==<span class=\"number\">1</span>&amp;&amp;(s[s1]==p[p1]||p[p1]==<span class=\"string\">'.'</span>))</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(p[p1+<span class=\"number\">1</span>]!=<span class=\"string\">'*'</span>)&#123;</span><br><span class=\"line\">       \t<span class=\"keyword\">if</span>(p[p1]==<span class=\"string\">'.'</span>||p[p1]==s[s1])</span><br><span class=\"line\">       \t\t<span class=\"keyword\">return</span> check(s,s1+<span class=\"number\">1</span>, p,p1+<span class=\"number\">1</span>);</span><br><span class=\"line\">       \t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">   \t&#125;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(p[p1]==<span class=\"string\">'.'</span>||p[p1]==s[s1])</span><br><span class=\"line\">   \t\t<span class=\"keyword\">if</span>(check(s, s1,p,p1+<span class=\"number\">2</span>))</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">return</span> check(s,s1+<span class=\"number\">1</span>, p,p1);</span><br><span class=\"line\">   \t<span class=\"keyword\">else</span></span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> check(s,s1, p,p1+<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isMatch</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">return</span> check(s.toCharArray(),<span class=\"number\">0</span>,p.toCharArray(),<span class=\"number\">0</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Median of Two Sorted Arrays","date":"2016-06-07T11:02:54.000Z","_content":"## Leetcode: Median of Two Sorted Arrays\nThere are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\n## 题意\n两个排序好的数组num1和num2的大小分别为m和n，找到数组的中位数，算法整体时间复杂度应该为O(log (m+n))。\n\n## 解题思路\n#### 方法1\n&emsp;&emsp;找到两个排序数组的中位数，非常容易想到的方法就是遍历两个数组，从小到大的寻找。因为是中位数，可能出现在两个数之间，所以使用一个长度为(m+n)/2+1的数组保存遍历的数，最后直接取对应位置的数即可。  \n&emsp;&emsp;这种方法的思路很简单，但是在效率上不高，虽然时间复杂度还是O(log (m+n))，但是其实存在很多不必要的比较，因为已经知道需要寻找的是第几个数了，最后在leetcode上运行时间为7ms，仅超过5%的提交。\n#### 代码实现\n```java\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    \tint m=nums1.length,n=nums2.length;\n    \t\n    \tint all=m+n;\n    \tint[] arr=new int[all/2+1];\n    \tint m1=0,n1=0,i=0;\n    \t\n    \twhile(i<arr.length){\n    \t\tif(m1==nums1.length)\n    \t\t\tarr[i++]=nums2[n1++];\n    \t\telse if(n1==nums2.length)\n    \t\t\tarr[i++]=nums1[m1++];\n    \t\telse{\n    \t\t\tif(nums1[m1]>nums2[n1])\n    \t\t\t\tarr[i++]=nums2[n1++];\n    \t\t\telse\n    \t\t\t\tarr[i++]=nums1[m1++];\n    \t\t}\n    \t}\n\n    \tif(all==1)\n    \t\treturn arr[0];\n    \tif(all%2==0)\n    \t\treturn (arr[all/2-1]+arr[all/2])/2.0;\n    \telse\n    \t\treturn arr[all/2];\n    }\n```\n#### 方法2\n&emsp;&emsp;还有一种使用参考二分法的做法来解这题。  \n&emsp;&emsp;对于两个长度为m和n的数组，从中找到第k小的数，取M[k/2]和N[k/2]两个数做比较，如果M[k/2]较大，那么目标在N[k/2]之后，继续在两个长度为m和n-k/2的数组中寻找第k/2小的数，反之亦然。如果取第i(i>k/2)个数比较M[i]和N[i]，即使M[i]>N[i]，那么目标数也可能会出现在n[i]之前。  \n&emsp;&emsp;在实现过程中还要考虑如果数组长度n小于k/2的时候，那就应该用n代替k/2。  \n&emsp;&emsp;最后在leetcode上提交运行时间为5ms，与大部分提交时间相同。\n#### 代码实现\n```java\n\tpublic int find(int[] arr1,int s1,int m,int[] arr2,int s2,int n,int k){\n\t\tint r1=m-s1;  \n\t\tint r2=n-s2;\n\t\t//比较数组剩余长度，使arr2小于arr1\n\t\tif(r1<r2)\n\t\t\treturn find(arr2, s2, n,arr1,s1,m, k);\n\t\tif(r2==0)\n\t\t\treturn arr1[k+s1-1];\n\t\tif(k==1)\n\t\t\treturn Math.min(arr1[s1], arr2[s2]);\n\t\t\n\t\t//arr2的向后移动距离\n\t\tint p2=Math.min(k/2, r2);\n\t\tint p1=k-p2;\n\t\t\n\t\tif(arr1[p1+s1-1]>arr2[p2+s2-1])\n\t\t\t//arr1较大，arr2向后移动\n\t\t\treturn find(arr1,s1,m,arr2,s2+p2,n,k-p2);\n\t\telse if(arr1[p1+s1-1]<arr2[p2+s2-1])\n\t\t\t//反之，arr1向后移动\n\t\t\treturn find(arr1,s1+p1,m,arr2,s2,n,k-p1);\n\t\treturn arr1[p1+s1-1];\n\t}\n\t\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    \tint m=nums1.length;\n    \tint n=nums2.length;\n    \t\n    \tint all=m+n;\n    \tif(all%2==0){\n    \t\treturn (find(nums1,0,m,nums2,0,n,all/2)+find(nums1,0,m,nums2,0,n,all/2+1))/2.0;\n    \t}else\n    \t\treturn find(nums1,0,m,nums2,0,n,all/2+1);\n    }\n```","source":"_posts/leetcode4.md","raw":"---\ntitle: Median of Two Sorted Arrays\ndate: 2016-06-07 19:02:54\ntags: [leetcode]\n---\n## Leetcode: Median of Two Sorted Arrays\nThere are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\n## 题意\n两个排序好的数组num1和num2的大小分别为m和n，找到数组的中位数，算法整体时间复杂度应该为O(log (m+n))。\n\n## 解题思路\n#### 方法1\n&emsp;&emsp;找到两个排序数组的中位数，非常容易想到的方法就是遍历两个数组，从小到大的寻找。因为是中位数，可能出现在两个数之间，所以使用一个长度为(m+n)/2+1的数组保存遍历的数，最后直接取对应位置的数即可。  \n&emsp;&emsp;这种方法的思路很简单，但是在效率上不高，虽然时间复杂度还是O(log (m+n))，但是其实存在很多不必要的比较，因为已经知道需要寻找的是第几个数了，最后在leetcode上运行时间为7ms，仅超过5%的提交。\n#### 代码实现\n```java\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    \tint m=nums1.length,n=nums2.length;\n    \t\n    \tint all=m+n;\n    \tint[] arr=new int[all/2+1];\n    \tint m1=0,n1=0,i=0;\n    \t\n    \twhile(i<arr.length){\n    \t\tif(m1==nums1.length)\n    \t\t\tarr[i++]=nums2[n1++];\n    \t\telse if(n1==nums2.length)\n    \t\t\tarr[i++]=nums1[m1++];\n    \t\telse{\n    \t\t\tif(nums1[m1]>nums2[n1])\n    \t\t\t\tarr[i++]=nums2[n1++];\n    \t\t\telse\n    \t\t\t\tarr[i++]=nums1[m1++];\n    \t\t}\n    \t}\n\n    \tif(all==1)\n    \t\treturn arr[0];\n    \tif(all%2==0)\n    \t\treturn (arr[all/2-1]+arr[all/2])/2.0;\n    \telse\n    \t\treturn arr[all/2];\n    }\n```\n#### 方法2\n&emsp;&emsp;还有一种使用参考二分法的做法来解这题。  \n&emsp;&emsp;对于两个长度为m和n的数组，从中找到第k小的数，取M[k/2]和N[k/2]两个数做比较，如果M[k/2]较大，那么目标在N[k/2]之后，继续在两个长度为m和n-k/2的数组中寻找第k/2小的数，反之亦然。如果取第i(i>k/2)个数比较M[i]和N[i]，即使M[i]>N[i]，那么目标数也可能会出现在n[i]之前。  \n&emsp;&emsp;在实现过程中还要考虑如果数组长度n小于k/2的时候，那就应该用n代替k/2。  \n&emsp;&emsp;最后在leetcode上提交运行时间为5ms，与大部分提交时间相同。\n#### 代码实现\n```java\n\tpublic int find(int[] arr1,int s1,int m,int[] arr2,int s2,int n,int k){\n\t\tint r1=m-s1;  \n\t\tint r2=n-s2;\n\t\t//比较数组剩余长度，使arr2小于arr1\n\t\tif(r1<r2)\n\t\t\treturn find(arr2, s2, n,arr1,s1,m, k);\n\t\tif(r2==0)\n\t\t\treturn arr1[k+s1-1];\n\t\tif(k==1)\n\t\t\treturn Math.min(arr1[s1], arr2[s2]);\n\t\t\n\t\t//arr2的向后移动距离\n\t\tint p2=Math.min(k/2, r2);\n\t\tint p1=k-p2;\n\t\t\n\t\tif(arr1[p1+s1-1]>arr2[p2+s2-1])\n\t\t\t//arr1较大，arr2向后移动\n\t\t\treturn find(arr1,s1,m,arr2,s2+p2,n,k-p2);\n\t\telse if(arr1[p1+s1-1]<arr2[p2+s2-1])\n\t\t\t//反之，arr1向后移动\n\t\t\treturn find(arr1,s1+p1,m,arr2,s2,n,k-p1);\n\t\treturn arr1[p1+s1-1];\n\t}\n\t\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n    \tint m=nums1.length;\n    \tint n=nums2.length;\n    \t\n    \tint all=m+n;\n    \tif(all%2==0){\n    \t\treturn (find(nums1,0,m,nums2,0,n,all/2)+find(nums1,0,m,nums2,0,n,all/2+1))/2.0;\n    \t}else\n    \t\treturn find(nums1,0,m,nums2,0,n,all/2+1);\n    }\n```","slug":"leetcode4","published":1,"updated":"2016-06-16T04:22:55.529Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citn1rchu0004vcqrt5vfvry2","content":"<h2 id=\"Leetcode-Median-of-Two-Sorted-Arrays\"><a href=\"#Leetcode-Median-of-Two-Sorted-Arrays\" class=\"headerlink\" title=\"Leetcode: Median of Two Sorted Arrays\"></a>Leetcode: Median of Two Sorted Arrays</h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>两个排序好的数组num1和num2的大小分别为m和n，找到数组的中位数，算法整体时间复杂度应该为O(log (m+n))。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h4 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h4><p>&emsp;&emsp;找到两个排序数组的中位数，非常容易想到的方法就是遍历两个数组，从小到大的寻找。因为是中位数，可能出现在两个数之间，所以使用一个长度为(m+n)/2+1的数组保存遍历的数，最后直接取对应位置的数即可。<br>&emsp;&emsp;这种方法的思路很简单，但是在效率上不高，虽然时间复杂度还是O(log (m+n))，但是其实存在很多不必要的比较，因为已经知道需要寻找的是第几个数了，最后在leetcode上运行时间为7ms，仅超过5%的提交。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m=nums1.length,n=nums2.length;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> all=m+n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[all/<span class=\"number\">2</span>+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1=<span class=\"number\">0</span>,n1=<span class=\"number\">0</span>,i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;arr.length)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(m1==nums1.length)</span><br><span class=\"line\">\t\t\tarr[i++]=nums2[n1++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n1==nums2.length)</span><br><span class=\"line\">\t\t\tarr[i++]=nums1[m1++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(nums1[m1]&gt;nums2[n1])</span><br><span class=\"line\">\t\t\t\tarr[i++]=nums2[n1++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tarr[i++]=nums1[m1++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(all==<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(all%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (arr[all/<span class=\"number\">2</span>-<span class=\"number\">1</span>]+arr[all/<span class=\"number\">2</span>])/<span class=\"number\">2.0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[all/<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h4><p>&emsp;&emsp;还有一种使用参考二分法的做法来解这题。<br>&emsp;&emsp;对于两个长度为m和n的数组，从中找到第k小的数，取M[k/2]和N[k/2]两个数做比较，如果M[k/2]较大，那么目标在N[k/2]之后，继续在两个长度为m和n-k/2的数组中寻找第k/2小的数，反之亦然。如果取第i(i&gt;k/2)个数比较M[i]和N[i]，即使M[i]&gt;N[i]，那么目标数也可能会出现在n[i]之前。<br>&emsp;&emsp;在实现过程中还要考虑如果数组长度n小于k/2的时候，那就应该用n代替k/2。<br>&emsp;&emsp;最后在leetcode上提交运行时间为5ms，与大部分提交时间相同。</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr1,<span class=\"keyword\">int</span> s1,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span>[] arr2,<span class=\"keyword\">int</span> s2,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r1=m-s1;  </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r2=n-s2;</span><br><span class=\"line\">\t<span class=\"comment\">//比较数组剩余长度，使arr2小于arr1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r1&lt;r2)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find(arr2, s2, n,arr1,s1,m, k);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r2==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr1[k+s1-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.min(arr1[s1], arr2[s2]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//arr2的向后移动距离</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p2=Math.min(k/<span class=\"number\">2</span>, r2);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p1=k-p2;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(arr1[p1+s1-<span class=\"number\">1</span>]&gt;arr2[p2+s2-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t<span class=\"comment\">//arr1较大，arr2向后移动</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find(arr1,s1,m,arr2,s2+p2,n,k-p2);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr1[p1+s1-<span class=\"number\">1</span>]&lt;arr2[p2+s2-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t<span class=\"comment\">//反之，arr1向后移动</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find(arr1,s1+p1,m,arr2,s2,n,k-p1);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr1[p1+s1-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> m=nums1.length;</span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> n=nums2.length;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> all=m+n;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(all%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> (find(nums1,<span class=\"number\">0</span>,m,nums2,<span class=\"number\">0</span>,n,all/<span class=\"number\">2</span>)+find(nums1,<span class=\"number\">0</span>,m,nums2,<span class=\"number\">0</span>,n,all/<span class=\"number\">2</span>+<span class=\"number\">1</span>))/<span class=\"number\">2.0</span>;</span><br><span class=\"line\">   \t&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> find(nums1,<span class=\"number\">0</span>,m,nums2,<span class=\"number\">0</span>,n,all/<span class=\"number\">2</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Leetcode-Median-of-Two-Sorted-Arrays\"><a href=\"#Leetcode-Median-of-Two-Sorted-Arrays\" class=\"headerlink\" title=\"Leetcode: Median of Two Sorted Arrays\"></a>Leetcode: Median of Two Sorted Arrays</h2><p>There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>两个排序好的数组num1和num2的大小分别为m和n，找到数组的中位数，算法整体时间复杂度应该为O(log (m+n))。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><h4 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h4><p>&emsp;&emsp;找到两个排序数组的中位数，非常容易想到的方法就是遍历两个数组，从小到大的寻找。因为是中位数，可能出现在两个数之间，所以使用一个长度为(m+n)/2+1的数组保存遍历的数，最后直接取对应位置的数即可。<br>&emsp;&emsp;这种方法的思路很简单，但是在效率上不高，虽然时间复杂度还是O(log (m+n))，但是其实存在很多不必要的比较，因为已经知道需要寻找的是第几个数了，最后在leetcode上运行时间为7ms，仅超过5%的提交。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m=nums1.length,n=nums2.length;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> all=m+n;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>[] arr=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[all/<span class=\"number\">2</span>+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m1=<span class=\"number\">0</span>,n1=<span class=\"number\">0</span>,i=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i&lt;arr.length)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(m1==nums1.length)</span><br><span class=\"line\">\t\t\tarr[i++]=nums2[n1++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n1==nums2.length)</span><br><span class=\"line\">\t\t\tarr[i++]=nums1[m1++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(nums1[m1]&gt;nums2[n1])</span><br><span class=\"line\">\t\t\t\tarr[i++]=nums2[n1++];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tarr[i++]=nums1[m1++];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(all==<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(all%<span class=\"number\">2</span>==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (arr[all/<span class=\"number\">2</span>-<span class=\"number\">1</span>]+arr[all/<span class=\"number\">2</span>])/<span class=\"number\">2.0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr[all/<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h4><p>&emsp;&emsp;还有一种使用参考二分法的做法来解这题。<br>&emsp;&emsp;对于两个长度为m和n的数组，从中找到第k小的数，取M[k/2]和N[k/2]两个数做比较，如果M[k/2]较大，那么目标在N[k/2]之后，继续在两个长度为m和n-k/2的数组中寻找第k/2小的数，反之亦然。如果取第i(i&gt;k/2)个数比较M[i]和N[i]，即使M[i]&gt;N[i]，那么目标数也可能会出现在n[i]之前。<br>&emsp;&emsp;在实现过程中还要考虑如果数组长度n小于k/2的时候，那就应该用n代替k/2。<br>&emsp;&emsp;最后在leetcode上提交运行时间为5ms，与大部分提交时间相同。</p>\n<h4 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr1,<span class=\"keyword\">int</span> s1,<span class=\"keyword\">int</span> m,<span class=\"keyword\">int</span>[] arr2,<span class=\"keyword\">int</span> s2,<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r1=m-s1;  </span><br><span class=\"line\">\t<span class=\"keyword\">int</span> r2=n-s2;</span><br><span class=\"line\">\t<span class=\"comment\">//比较数组剩余长度，使arr2小于arr1</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r1&lt;r2)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find(arr2, s2, n,arr1,s1,m, k);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(r2==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> arr1[k+s1-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Math.min(arr1[s1], arr2[s2]);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//arr2的向后移动距离</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p2=Math.min(k/<span class=\"number\">2</span>, r2);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p1=k-p2;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(arr1[p1+s1-<span class=\"number\">1</span>]&gt;arr2[p2+s2-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t<span class=\"comment\">//arr1较大，arr2向后移动</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find(arr1,s1,m,arr2,s2+p2,n,k-p2);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(arr1[p1+s1-<span class=\"number\">1</span>]&lt;arr2[p2+s2-<span class=\"number\">1</span>])</span><br><span class=\"line\">\t\t<span class=\"comment\">//反之，arr1向后移动</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> find(arr1,s1+p1,m,arr2,s2,n,k-p1);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> arr1[p1+s1-<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums1, <span class=\"keyword\">int</span>[] nums2)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> m=nums1.length;</span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> n=nums2.length;</span><br><span class=\"line\">   \t</span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> all=m+n;</span><br><span class=\"line\">   \t<span class=\"keyword\">if</span>(all%<span class=\"number\">2</span>==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> (find(nums1,<span class=\"number\">0</span>,m,nums2,<span class=\"number\">0</span>,n,all/<span class=\"number\">2</span>)+find(nums1,<span class=\"number\">0</span>,m,nums2,<span class=\"number\">0</span>,n,all/<span class=\"number\">2</span>+<span class=\"number\">1</span>))/<span class=\"number\">2.0</span>;</span><br><span class=\"line\">   \t&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> find(nums1,<span class=\"number\">0</span>,m,nums2,<span class=\"number\">0</span>,n,all/<span class=\"number\">2</span>+<span class=\"number\">1</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Reverse Nodes in k-Group","date":"2016-06-17T07:53:11.000Z","_content":"## Reverse Nodes in k-Group\nGiven a linked list, reverse the nodes of a linked list k at a time and return its modified list.  \nIf the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.  \nYou may not alter the values in the nodes, only nodes itself may be changed.  \nOnly constant memory is allowed.  \nFor example,\nGiven this linked list: 1->2->3->4->5  \nFor k = 2, you should return: 2->1->4->3->5  \nFor k = 3, you should return: 3->2->1->4->5\n## 题意\n给定一个链表和一个值k，使链表以k为宽度进行反转，小于k的部分进行保留。在变换过程中不能修改节点的值，且只能使用常量的内存空间。  \n例如：输入链表1->2->3->4->5  \n如果k=2，需要返回2->1->4->3->5  \n如果k=3，需要返回3->2->1->4->5\n## 解题思路\n这道题主要就是考察对于链表的操作，而且只能使用固定的内存空间，因此就是对链表进行遍历，每次遍历k个节点，将节点进行反转，然后将这部分链表的头节点指向下一部分链表的末尾。如果出现剩余节点小于k的情况，就需要调整头节点指向下部分链表的开头。  \n例如1->2->3->4->5，k=2  \n1.先定位头节点到2，这个节点将作为返回值  \n2.将1->2进行翻转，翻转完成后向后遍历k个，如果能够遍历完k个，到第3步，否则到第4步  \n3.将当前部分的头节点的next指向下一部分的末节点，即将1的next指向4，然后将当前的头移到下一部分的头节点即3这个位置。然后重复2,3两步  \n4.此时剩余的节点个数小于k个，那么需要将当前部分的头节点的next指向下一部分的头，即将3的next指向5，然后返回head\n```java\n    public ListNode reverseKGroup(ListNode head, int k) {\n        if(k==1||head==null)return head;\n        ListNode start=head,end=head,next,it,itnext,itprev;\n        it=head;\n        for(int i=0;i<k-1;i++){\n        \tit=it.next;\n        \tif(it==null)return head;\n        }\n        head=it;\n        end=head;\n        while(true){\n        \titprev=start;\n\t\t\tit=start.next;\n\t\t\tnext=end.next;\n    \t\tfor(int i=0;i<k-1;i++){\n    \t\t\titnext=it.next;\n    \t\t\tit.next=itprev;\n    \t\t\titprev=it;\n    \t\t\tit=itnext;\n    \t\t}\n        \tend=next;\n        \tfor(int i=0;i<k-1;i++){\n        \t\tif(end==null||end.next==null) {\n        \t\t\tstart.next=next;\n        \t\t\treturn head;\n        \t\t}\n        \t\tend=end.next;\n        \t}\n    \t\tstart.next=end;\n    \t\tstart=next;\n        }\n    }\n```","source":"_posts/leetcode25.md","raw":"---\ntitle: Reverse Nodes in k-Group\ndate: 2016-06-17 15:53:11\ntags: [leetcode]\n---\n## Reverse Nodes in k-Group\nGiven a linked list, reverse the nodes of a linked list k at a time and return its modified list.  \nIf the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.  \nYou may not alter the values in the nodes, only nodes itself may be changed.  \nOnly constant memory is allowed.  \nFor example,\nGiven this linked list: 1->2->3->4->5  \nFor k = 2, you should return: 2->1->4->3->5  \nFor k = 3, you should return: 3->2->1->4->5\n## 题意\n给定一个链表和一个值k，使链表以k为宽度进行反转，小于k的部分进行保留。在变换过程中不能修改节点的值，且只能使用常量的内存空间。  \n例如：输入链表1->2->3->4->5  \n如果k=2，需要返回2->1->4->3->5  \n如果k=3，需要返回3->2->1->4->5\n## 解题思路\n这道题主要就是考察对于链表的操作，而且只能使用固定的内存空间，因此就是对链表进行遍历，每次遍历k个节点，将节点进行反转，然后将这部分链表的头节点指向下一部分链表的末尾。如果出现剩余节点小于k的情况，就需要调整头节点指向下部分链表的开头。  \n例如1->2->3->4->5，k=2  \n1.先定位头节点到2，这个节点将作为返回值  \n2.将1->2进行翻转，翻转完成后向后遍历k个，如果能够遍历完k个，到第3步，否则到第4步  \n3.将当前部分的头节点的next指向下一部分的末节点，即将1的next指向4，然后将当前的头移到下一部分的头节点即3这个位置。然后重复2,3两步  \n4.此时剩余的节点个数小于k个，那么需要将当前部分的头节点的next指向下一部分的头，即将3的next指向5，然后返回head\n```java\n    public ListNode reverseKGroup(ListNode head, int k) {\n        if(k==1||head==null)return head;\n        ListNode start=head,end=head,next,it,itnext,itprev;\n        it=head;\n        for(int i=0;i<k-1;i++){\n        \tit=it.next;\n        \tif(it==null)return head;\n        }\n        head=it;\n        end=head;\n        while(true){\n        \titprev=start;\n\t\t\tit=start.next;\n\t\t\tnext=end.next;\n    \t\tfor(int i=0;i<k-1;i++){\n    \t\t\titnext=it.next;\n    \t\t\tit.next=itprev;\n    \t\t\titprev=it;\n    \t\t\tit=itnext;\n    \t\t}\n        \tend=next;\n        \tfor(int i=0;i<k-1;i++){\n        \t\tif(end==null||end.next==null) {\n        \t\t\tstart.next=next;\n        \t\t\treturn head;\n        \t\t}\n        \t\tend=end.next;\n        \t}\n    \t\tstart.next=end;\n    \t\tstart=next;\n        }\n    }\n```","slug":"leetcode25","published":1,"updated":"2016-06-17T08:25:07.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citn1rci60006vcqrghic1ceg","content":"<h2 id=\"Reverse-Nodes-in-k-Group\"><a href=\"#Reverse-Nodes-in-k-Group\" class=\"headerlink\" title=\"Reverse Nodes in k-Group\"></a>Reverse Nodes in k-Group</h2><p>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.<br>If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.<br>You may not alter the values in the nodes, only nodes itself may be changed.<br>Only constant memory is allowed.<br>For example,<br>Given this linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5<br>For k = 2, you should return: 2-&gt;1-&gt;4-&gt;3-&gt;5<br>For k = 3, you should return: 3-&gt;2-&gt;1-&gt;4-&gt;5</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给定一个链表和一个值k，使链表以k为宽度进行反转，小于k的部分进行保留。在变换过程中不能修改节点的值，且只能使用常量的内存空间。<br>例如：输入链表1-&gt;2-&gt;3-&gt;4-&gt;5<br>如果k=2，需要返回2-&gt;1-&gt;4-&gt;3-&gt;5<br>如果k=3，需要返回3-&gt;2-&gt;1-&gt;4-&gt;5</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这道题主要就是考察对于链表的操作，而且只能使用固定的内存空间，因此就是对链表进行遍历，每次遍历k个节点，将节点进行反转，然后将这部分链表的头节点指向下一部分链表的末尾。如果出现剩余节点小于k的情况，就需要调整头节点指向下部分链表的开头。<br>例如1-&gt;2-&gt;3-&gt;4-&gt;5，k=2<br>1.先定位头节点到2，这个节点将作为返回值<br>2.将1-&gt;2进行翻转，翻转完成后向后遍历k个，如果能够遍历完k个，到第3步，否则到第4步<br>3.将当前部分的头节点的next指向下一部分的末节点，即将1的next指向4，然后将当前的头移到下一部分的头节点即3这个位置。然后重复2,3两步<br>4.此时剩余的节点个数小于k个，那么需要将当前部分的头节点的next指向下一部分的头，即将3的next指向5，然后返回head<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseKGroup</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>||head==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">     ListNode start=head,end=head,next,it,itnext,itprev;</span><br><span class=\"line\">     it=head;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">     \tit=it.next;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(it==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     head=it;</span><br><span class=\"line\">     end=head;</span><br><span class=\"line\">     <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">     \titprev=start;</span><br><span class=\"line\">it=start.next;</span><br><span class=\"line\">next=end.next;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\"> \t\t\titnext=it.next;</span><br><span class=\"line\"> \t\t\tit.next=itprev;</span><br><span class=\"line\"> \t\t\titprev=it;</span><br><span class=\"line\"> \t\t\tit=itnext;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">     \tend=next;</span><br><span class=\"line\">     \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">     \t\t<span class=\"keyword\">if</span>(end==<span class=\"keyword\">null</span>||end.next==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     \t\t\tstart.next=next;</span><br><span class=\"line\">     \t\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">     \t\t&#125;</span><br><span class=\"line\">     \t\tend=end.next;</span><br><span class=\"line\">     \t&#125;</span><br><span class=\"line\"> \t\tstart.next=end;</span><br><span class=\"line\"> \t\tstart=next;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"Reverse-Nodes-in-k-Group\"><a href=\"#Reverse-Nodes-in-k-Group\" class=\"headerlink\" title=\"Reverse Nodes in k-Group\"></a>Reverse Nodes in k-Group</h2><p>Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.<br>If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.<br>You may not alter the values in the nodes, only nodes itself may be changed.<br>Only constant memory is allowed.<br>For example,<br>Given this linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5<br>For k = 2, you should return: 2-&gt;1-&gt;4-&gt;3-&gt;5<br>For k = 3, you should return: 3-&gt;2-&gt;1-&gt;4-&gt;5</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>给定一个链表和一个值k，使链表以k为宽度进行反转，小于k的部分进行保留。在变换过程中不能修改节点的值，且只能使用常量的内存空间。<br>例如：输入链表1-&gt;2-&gt;3-&gt;4-&gt;5<br>如果k=2，需要返回2-&gt;1-&gt;4-&gt;3-&gt;5<br>如果k=3，需要返回3-&gt;2-&gt;1-&gt;4-&gt;5</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>这道题主要就是考察对于链表的操作，而且只能使用固定的内存空间，因此就是对链表进行遍历，每次遍历k个节点，将节点进行反转，然后将这部分链表的头节点指向下一部分链表的末尾。如果出现剩余节点小于k的情况，就需要调整头节点指向下部分链表的开头。<br>例如1-&gt;2-&gt;3-&gt;4-&gt;5，k=2<br>1.先定位头节点到2，这个节点将作为返回值<br>2.将1-&gt;2进行翻转，翻转完成后向后遍历k个，如果能够遍历完k个，到第3步，否则到第4步<br>3.将当前部分的头节点的next指向下一部分的末节点，即将1的next指向4，然后将当前的头移到下一部分的头节点即3这个位置。然后重复2,3两步<br>4.此时剩余的节点个数小于k个，那么需要将当前部分的头节点的next指向下一部分的头，即将3的next指向5，然后返回head<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">reverseKGroup</span><span class=\"params\">(ListNode head, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(k==<span class=\"number\">1</span>||head==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">     ListNode start=head,end=head,next,it,itnext,itprev;</span><br><span class=\"line\">     it=head;</span><br><span class=\"line\">     <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">     \tit=it.next;</span><br><span class=\"line\">     \t<span class=\"keyword\">if</span>(it==<span class=\"keyword\">null</span>)<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     head=it;</span><br><span class=\"line\">     end=head;</span><br><span class=\"line\">     <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">     \titprev=start;</span><br><span class=\"line\">it=start.next;</span><br><span class=\"line\">next=end.next;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\"> \t\t\titnext=it.next;</span><br><span class=\"line\"> \t\t\tit.next=itprev;</span><br><span class=\"line\"> \t\t\titprev=it;</span><br><span class=\"line\"> \t\t\tit=itnext;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">     \tend=next;</span><br><span class=\"line\">     \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;k-<span class=\"number\">1</span>;i++)&#123;</span><br><span class=\"line\">     \t\t<span class=\"keyword\">if</span>(end==<span class=\"keyword\">null</span>||end.next==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     \t\t\tstart.next=next;</span><br><span class=\"line\">     \t\t\t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">     \t\t&#125;</span><br><span class=\"line\">     \t\tend=end.next;</span><br><span class=\"line\">     \t&#125;</span><br><span class=\"line\"> \t\tstart.next=end;</span><br><span class=\"line\"> \t\tstart=next;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"饥荒独立服务器搭建","date":"2016-06-14T08:49:48.000Z","_content":"## Don't starve together 独立服务器搭建指南\n&emsp;&emsp;在和朋友一起玩Don't starve together的时候发现游戏玩到后期总是会变的非常不流畅，经过测试后排除网络问题，主要是因为联机玩DST时创建世界的那台主机因为需要同时处理画面和世界的刷新，玩到后期主机要处理的太多，其他联机的用户就会卡顿。为了解决这个问题我也是头疼了很久，最后发现在主机上搭建一个独立服务器，所有人都再连接到这个独立服务器上，卡顿问题就能很好的解决了。当然这个独立服务器并不需要一台独立的电脑，只需要一起玩游戏的某个人开一个独立服务器，大家再连接到这个独立服务器里，就不会卡顿了。  \n### Windows搭建全过程\n#### 1.购买DST的正版\n#### 2.创建世界\n&emsp;&emsp;首先打开饥荒，先创建一个世界，选择好mod，创建的选项等，然后点创建世界，等待世界创建成功后断开世界。需要记住你创建的这个世界是第几个存档，如图例子就是第三个存档。  \n![](/img/DST1.png)  \n#### 3.配置\n&emsp;&emsp;在世界创建成功后，就能在在目录“文档/Klei/DoNotStarveTogether/Cluster_3”(对应你创建的第几个存档)，这个目录下看到几个文件：包括Master(主世界数据)，Caves(洞穴实际数据，如果选择添加洞穴的话)，cluster.ini(世界的配置文件)。然后需要在这个目录中添加一个文件叫cluster_token.txt，下面介绍在这个文件中需要写入什么东西。  \n&emsp;&emsp;进入DST后的这个页面，点击下面的个人资料  \n![](/img/DST2.jpg)  \n&emsp;&emsp;出现下面这个页面，点击generate server token按钮，将上面出现的token复制到cluster_token.txt中，就可以了。如果没这一步在创建世界的时候会出错，估计是Klei对防盗版的一个限制。  \n![](/img/DST3.jpg)  \n#### 4.创建脚本\n&emsp;&emsp;将上述准备工作做完后，就进入最后一步，创建启动脚本和启动服务器了。进入steam的安装目录，进入steamapps/common/Don't Starve Together/bin，可以看到一个dontstarve_dedicated_server_nullrenderer.exe这个文件，从这个应用程序的名字就可以知道，就需要通过他来创建一个无画面的服务器。  \n&emsp;&emsp;创建一个文件start.bat,在里面写入\n```\ndontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Master\n```\n&emsp;&emsp;当然Cluster_3这里改成你对应的存档，然后创建一个文件start_cave.bat,在里面写入\n```\ndontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Caves\n```\n&emsp;&emsp;写完后就将这两个脚本启动就可以了。  \n![](/img/DST4.jpg)\n#### 5.加入游戏\n&emsp;&emsp;选择浏览游戏，搜索创建的服务器名字(本机的话需要到LAN中才能找到世界)，就能找到这个世界并加入游戏了，亲测玩到后期也一点都不卡哦。  \n![](/img/DST5.jpg)\n### Mac搭建全过程\n#### 1，2步同Windows\n#### 3.配置\n&emsp;&emsp;Mac的数据文件目录在\"~/文稿/Klei/...\"中，具体配置相同。\n#### 4.创建脚本\n&emsp;&emsp;Mac中饥荒的目录在\"~/Library/Application Support/Steam/steamapps/common/Don't Stave Together.app/MacOS\"中有一个叫dontstarve_dedicated_server_nullrenderer的文件，同在这个目录下创建两个文件start.sh和start_cave.sh，分别写入\n```\n./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Master\n```\n```\n./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Caves\n```\n最然后在命令行执行命令，使这两个文件变成可执行文件\n```\nchmod 777 start.sh\nchmod 777 start_cave.sh\n```\n通过下面的命令启动两个脚本\n```\n./start.sh\n./start_cave.sh\n```\n#### 5.加入游戏\n&emsp;&emsp;加入游戏玩耍吧。\n","source":"_posts/饥荒独立服务器搭建.md","raw":"---\ntitle: 饥荒独立服务器搭建\ndate: 2016-06-14 16:49:48\ntags: [games]\n---\n## Don't starve together 独立服务器搭建指南\n&emsp;&emsp;在和朋友一起玩Don't starve together的时候发现游戏玩到后期总是会变的非常不流畅，经过测试后排除网络问题，主要是因为联机玩DST时创建世界的那台主机因为需要同时处理画面和世界的刷新，玩到后期主机要处理的太多，其他联机的用户就会卡顿。为了解决这个问题我也是头疼了很久，最后发现在主机上搭建一个独立服务器，所有人都再连接到这个独立服务器上，卡顿问题就能很好的解决了。当然这个独立服务器并不需要一台独立的电脑，只需要一起玩游戏的某个人开一个独立服务器，大家再连接到这个独立服务器里，就不会卡顿了。  \n### Windows搭建全过程\n#### 1.购买DST的正版\n#### 2.创建世界\n&emsp;&emsp;首先打开饥荒，先创建一个世界，选择好mod，创建的选项等，然后点创建世界，等待世界创建成功后断开世界。需要记住你创建的这个世界是第几个存档，如图例子就是第三个存档。  \n![](/img/DST1.png)  \n#### 3.配置\n&emsp;&emsp;在世界创建成功后，就能在在目录“文档/Klei/DoNotStarveTogether/Cluster_3”(对应你创建的第几个存档)，这个目录下看到几个文件：包括Master(主世界数据)，Caves(洞穴实际数据，如果选择添加洞穴的话)，cluster.ini(世界的配置文件)。然后需要在这个目录中添加一个文件叫cluster_token.txt，下面介绍在这个文件中需要写入什么东西。  \n&emsp;&emsp;进入DST后的这个页面，点击下面的个人资料  \n![](/img/DST2.jpg)  \n&emsp;&emsp;出现下面这个页面，点击generate server token按钮，将上面出现的token复制到cluster_token.txt中，就可以了。如果没这一步在创建世界的时候会出错，估计是Klei对防盗版的一个限制。  \n![](/img/DST3.jpg)  \n#### 4.创建脚本\n&emsp;&emsp;将上述准备工作做完后，就进入最后一步，创建启动脚本和启动服务器了。进入steam的安装目录，进入steamapps/common/Don't Starve Together/bin，可以看到一个dontstarve_dedicated_server_nullrenderer.exe这个文件，从这个应用程序的名字就可以知道，就需要通过他来创建一个无画面的服务器。  \n&emsp;&emsp;创建一个文件start.bat,在里面写入\n```\ndontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Master\n```\n&emsp;&emsp;当然Cluster_3这里改成你对应的存档，然后创建一个文件start_cave.bat,在里面写入\n```\ndontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Caves\n```\n&emsp;&emsp;写完后就将这两个脚本启动就可以了。  \n![](/img/DST4.jpg)\n#### 5.加入游戏\n&emsp;&emsp;选择浏览游戏，搜索创建的服务器名字(本机的话需要到LAN中才能找到世界)，就能找到这个世界并加入游戏了，亲测玩到后期也一点都不卡哦。  \n![](/img/DST5.jpg)\n### Mac搭建全过程\n#### 1，2步同Windows\n#### 3.配置\n&emsp;&emsp;Mac的数据文件目录在\"~/文稿/Klei/...\"中，具体配置相同。\n#### 4.创建脚本\n&emsp;&emsp;Mac中饥荒的目录在\"~/Library/Application Support/Steam/steamapps/common/Don't Stave Together.app/MacOS\"中有一个叫dontstarve_dedicated_server_nullrenderer的文件，同在这个目录下创建两个文件start.sh和start_cave.sh，分别写入\n```\n./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Master\n```\n```\n./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Caves\n```\n最然后在命令行执行命令，使这两个文件变成可执行文件\n```\nchmod 777 start.sh\nchmod 777 start_cave.sh\n```\n通过下面的命令启动两个脚本\n```\n./start.sh\n./start_cave.sh\n```\n#### 5.加入游戏\n&emsp;&emsp;加入游戏玩耍吧。\n","slug":"饥荒独立服务器搭建","published":1,"updated":"2016-06-19T12:01:26.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citn1rci80007vcqrc1uos27e","content":"<h2 id=\"Don’t-starve-together-独立服务器搭建指南\"><a href=\"#Don’t-starve-together-独立服务器搭建指南\" class=\"headerlink\" title=\"Don’t starve together 独立服务器搭建指南\"></a>Don’t starve together 独立服务器搭建指南</h2><p>&emsp;&emsp;在和朋友一起玩Don’t starve together的时候发现游戏玩到后期总是会变的非常不流畅，经过测试后排除网络问题，主要是因为联机玩DST时创建世界的那台主机因为需要同时处理画面和世界的刷新，玩到后期主机要处理的太多，其他联机的用户就会卡顿。为了解决这个问题我也是头疼了很久，最后发现在主机上搭建一个独立服务器，所有人都再连接到这个独立服务器上，卡顿问题就能很好的解决了。当然这个独立服务器并不需要一台独立的电脑，只需要一起玩游戏的某个人开一个独立服务器，大家再连接到这个独立服务器里，就不会卡顿了。  </p>\n<h3 id=\"Windows搭建全过程\"><a href=\"#Windows搭建全过程\" class=\"headerlink\" title=\"Windows搭建全过程\"></a>Windows搭建全过程</h3><h4 id=\"1-购买DST的正版\"><a href=\"#1-购买DST的正版\" class=\"headerlink\" title=\"1.购买DST的正版\"></a>1.购买DST的正版</h4><h4 id=\"2-创建世界\"><a href=\"#2-创建世界\" class=\"headerlink\" title=\"2.创建世界\"></a>2.创建世界</h4><p>&emsp;&emsp;首先打开饥荒，先创建一个世界，选择好mod，创建的选项等，然后点创建世界，等待世界创建成功后断开世界。需要记住你创建的这个世界是第几个存档，如图例子就是第三个存档。<br><img src=\"/img/DST1.png\" alt=\"\">  </p>\n<h4 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3.配置\"></a>3.配置</h4><p>&emsp;&emsp;在世界创建成功后，就能在在目录“文档/Klei/DoNotStarveTogether/Cluster_3”(对应你创建的第几个存档)，这个目录下看到几个文件：包括Master(主世界数据)，Caves(洞穴实际数据，如果选择添加洞穴的话)，cluster.ini(世界的配置文件)。然后需要在这个目录中添加一个文件叫cluster_token.txt，下面介绍在这个文件中需要写入什么东西。<br>&emsp;&emsp;进入DST后的这个页面，点击下面的个人资料<br><img src=\"/img/DST2.jpg\" alt=\"\"><br>&emsp;&emsp;出现下面这个页面，点击generate server token按钮，将上面出现的token复制到cluster_token.txt中，就可以了。如果没这一步在创建世界的时候会出错，估计是Klei对防盗版的一个限制。<br><img src=\"/img/DST3.jpg\" alt=\"\">  </p>\n<h4 id=\"4-创建脚本\"><a href=\"#4-创建脚本\" class=\"headerlink\" title=\"4.创建脚本\"></a>4.创建脚本</h4><p>&emsp;&emsp;将上述准备工作做完后，就进入最后一步，创建启动脚本和启动服务器了。进入steam的安装目录，进入steamapps/common/Don’t Starve Together/bin，可以看到一个dontstarve_dedicated_server_nullrenderer.exe这个文件，从这个应用程序的名字就可以知道，就需要通过他来创建一个无画面的服务器。<br>&emsp;&emsp;创建一个文件start.bat,在里面写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Master</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;当然Cluster_3这里改成你对应的存档，然后创建一个文件start_cave.bat,在里面写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Caves</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;写完后就将这两个脚本启动就可以了。<br><img src=\"/img/DST4.jpg\" alt=\"\"></p>\n<h4 id=\"5-加入游戏\"><a href=\"#5-加入游戏\" class=\"headerlink\" title=\"5.加入游戏\"></a>5.加入游戏</h4><p>&emsp;&emsp;选择浏览游戏，搜索创建的服务器名字(本机的话需要到LAN中才能找到世界)，就能找到这个世界并加入游戏了，亲测玩到后期也一点都不卡哦。<br><img src=\"/img/DST5.jpg\" alt=\"\"></p>\n<h3 id=\"Mac搭建全过程\"><a href=\"#Mac搭建全过程\" class=\"headerlink\" title=\"Mac搭建全过程\"></a>Mac搭建全过程</h3><h4 id=\"1，2步同Windows\"><a href=\"#1，2步同Windows\" class=\"headerlink\" title=\"1，2步同Windows\"></a>1，2步同Windows</h4><h4 id=\"3-配置-1\"><a href=\"#3-配置-1\" class=\"headerlink\" title=\"3.配置\"></a>3.配置</h4><p>&emsp;&emsp;Mac的数据文件目录在”~/文稿/Klei/…”中，具体配置相同。</p>\n<h4 id=\"4-创建脚本-1\"><a href=\"#4-创建脚本-1\" class=\"headerlink\" title=\"4.创建脚本\"></a>4.创建脚本</h4><p>&emsp;&emsp;Mac中饥荒的目录在”~/Library/Application Support/Steam/steamapps/common/Don’t Stave Together.app/MacOS”中有一个叫dontstarve_dedicated_server_nullrenderer的文件，同在这个目录下创建两个文件start.sh和start_cave.sh，分别写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Master</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Caves</span><br></pre></td></tr></table></figure>\n<p>最然后在命令行执行命令，使这两个文件变成可执行文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 start.sh</span><br><span class=\"line\">chmod 777 start_cave.sh</span><br></pre></td></tr></table></figure></p>\n<p>通过下面的命令启动两个脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./start.sh</span><br><span class=\"line\">./start_cave.sh</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-加入游戏-1\"><a href=\"#5-加入游戏-1\" class=\"headerlink\" title=\"5.加入游戏\"></a>5.加入游戏</h4><p>&emsp;&emsp;加入游戏玩耍吧。</p>\n","excerpt":"","more":"<h2 id=\"Don’t-starve-together-独立服务器搭建指南\"><a href=\"#Don’t-starve-together-独立服务器搭建指南\" class=\"headerlink\" title=\"Don’t starve together 独立服务器搭建指南\"></a>Don’t starve together 独立服务器搭建指南</h2><p>&emsp;&emsp;在和朋友一起玩Don’t starve together的时候发现游戏玩到后期总是会变的非常不流畅，经过测试后排除网络问题，主要是因为联机玩DST时创建世界的那台主机因为需要同时处理画面和世界的刷新，玩到后期主机要处理的太多，其他联机的用户就会卡顿。为了解决这个问题我也是头疼了很久，最后发现在主机上搭建一个独立服务器，所有人都再连接到这个独立服务器上，卡顿问题就能很好的解决了。当然这个独立服务器并不需要一台独立的电脑，只需要一起玩游戏的某个人开一个独立服务器，大家再连接到这个独立服务器里，就不会卡顿了。  </p>\n<h3 id=\"Windows搭建全过程\"><a href=\"#Windows搭建全过程\" class=\"headerlink\" title=\"Windows搭建全过程\"></a>Windows搭建全过程</h3><h4 id=\"1-购买DST的正版\"><a href=\"#1-购买DST的正版\" class=\"headerlink\" title=\"1.购买DST的正版\"></a>1.购买DST的正版</h4><h4 id=\"2-创建世界\"><a href=\"#2-创建世界\" class=\"headerlink\" title=\"2.创建世界\"></a>2.创建世界</h4><p>&emsp;&emsp;首先打开饥荒，先创建一个世界，选择好mod，创建的选项等，然后点创建世界，等待世界创建成功后断开世界。需要记住你创建的这个世界是第几个存档，如图例子就是第三个存档。<br><img src=\"/img/DST1.png\" alt=\"\">  </p>\n<h4 id=\"3-配置\"><a href=\"#3-配置\" class=\"headerlink\" title=\"3.配置\"></a>3.配置</h4><p>&emsp;&emsp;在世界创建成功后，就能在在目录“文档/Klei/DoNotStarveTogether/Cluster_3”(对应你创建的第几个存档)，这个目录下看到几个文件：包括Master(主世界数据)，Caves(洞穴实际数据，如果选择添加洞穴的话)，cluster.ini(世界的配置文件)。然后需要在这个目录中添加一个文件叫cluster_token.txt，下面介绍在这个文件中需要写入什么东西。<br>&emsp;&emsp;进入DST后的这个页面，点击下面的个人资料<br><img src=\"/img/DST2.jpg\" alt=\"\"><br>&emsp;&emsp;出现下面这个页面，点击generate server token按钮，将上面出现的token复制到cluster_token.txt中，就可以了。如果没这一步在创建世界的时候会出错，估计是Klei对防盗版的一个限制。<br><img src=\"/img/DST3.jpg\" alt=\"\">  </p>\n<h4 id=\"4-创建脚本\"><a href=\"#4-创建脚本\" class=\"headerlink\" title=\"4.创建脚本\"></a>4.创建脚本</h4><p>&emsp;&emsp;将上述准备工作做完后，就进入最后一步，创建启动脚本和启动服务器了。进入steam的安装目录，进入steamapps/common/Don’t Starve Together/bin，可以看到一个dontstarve_dedicated_server_nullrenderer.exe这个文件，从这个应用程序的名字就可以知道，就需要通过他来创建一个无画面的服务器。<br>&emsp;&emsp;创建一个文件start.bat,在里面写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Master</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;当然Cluster_3这里改成你对应的存档，然后创建一个文件start_cave.bat,在里面写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Caves</span><br></pre></td></tr></table></figure></p>\n<p>&emsp;&emsp;写完后就将这两个脚本启动就可以了。<br><img src=\"/img/DST4.jpg\" alt=\"\"></p>\n<h4 id=\"5-加入游戏\"><a href=\"#5-加入游戏\" class=\"headerlink\" title=\"5.加入游戏\"></a>5.加入游戏</h4><p>&emsp;&emsp;选择浏览游戏，搜索创建的服务器名字(本机的话需要到LAN中才能找到世界)，就能找到这个世界并加入游戏了，亲测玩到后期也一点都不卡哦。<br><img src=\"/img/DST5.jpg\" alt=\"\"></p>\n<h3 id=\"Mac搭建全过程\"><a href=\"#Mac搭建全过程\" class=\"headerlink\" title=\"Mac搭建全过程\"></a>Mac搭建全过程</h3><h4 id=\"1，2步同Windows\"><a href=\"#1，2步同Windows\" class=\"headerlink\" title=\"1，2步同Windows\"></a>1，2步同Windows</h4><h4 id=\"3-配置-1\"><a href=\"#3-配置-1\" class=\"headerlink\" title=\"3.配置\"></a>3.配置</h4><p>&emsp;&emsp;Mac的数据文件目录在”~/文稿/Klei/…”中，具体配置相同。</p>\n<h4 id=\"4-创建脚本-1\"><a href=\"#4-创建脚本-1\" class=\"headerlink\" title=\"4.创建脚本\"></a>4.创建脚本</h4><p>&emsp;&emsp;Mac中饥荒的目录在”~/Library/Application Support/Steam/steamapps/common/Don’t Stave Together.app/MacOS”中有一个叫dontstarve_dedicated_server_nullrenderer的文件，同在这个目录下创建两个文件start.sh和start_cave.sh，分别写入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Master</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./dontstarve_dedicated_server_nullrenderer -console -cluster Cluster_3 -shard Caves</span><br></pre></td></tr></table></figure>\n<p>最然后在命令行执行命令，使这两个文件变成可执行文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 start.sh</span><br><span class=\"line\">chmod 777 start_cave.sh</span><br></pre></td></tr></table></figure></p>\n<p>通过下面的命令启动两个脚本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./start.sh</span><br><span class=\"line\">./start_cave.sh</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"5-加入游戏-1\"><a href=\"#5-加入游戏-1\" class=\"headerlink\" title=\"5.加入游戏\"></a>5.加入游戏</h4><p>&emsp;&emsp;加入游戏玩耍吧。</p>\n"},{"title":"Merge k Sorted Lists","date":"2016-06-16T04:21:39.000Z","_content":"## Leetcode: Merge k Sorted Lists\nMerge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\n## 题意\n将k个有序链表合并成一个有序链表，分析算法的复杂度。\n## 集体思路\n对于k个有序链表的合并，使用分而治之的思路，先让两个链表合并得到一个新链表，再将新链表进行合并。算法的时间复杂度是log(k)\\*(k\\*n)，n表示链表长度的平均值。空间复杂度为O(1)。提交后在leetcode上运行时间在前30%。\n#### 代码实现\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n    \treturn merge(lists,0,lists.length-1);\n    }\n    \n    public ListNode merge(ListNode[] lists,int a,int b){\n    \tif(lists.length==0) return null;\n    \tif(a<b){\n    \t\tint mid=(a+b)/2;\n    \t\tListNode l1=merge(lists,a,mid);\n    \t\tListNode l2=merge(lists,mid+1,b);\n    \t\treturn mergerTwo(l1,l2);\n    \t}else \n    \t\treturn lists[a];\n    }\n    \n    public ListNode mergerTwo(ListNode l1,ListNode l2){\n    \tListNode head=new ListNode(0);\n    \tListNode it=head;\n    \twhile(l1!=null&&l2!=null){\n    \t\tint min;\n    \t\tif(l1.val>l2.val){\n    \t\t\tmin=l2.val;\n    \t\t\tl2=l2.next;\n    \t\t}else{\n    \t\t\tmin=l1.val;\n    \t\t\tl1=l1.next;\n    \t\t}\n    \t\tit.next=new ListNode(min);\n    \t\tit=it.next;\n    \t}\n    \twhile(l1!=null){\n    \t\tit.next=new ListNode(l1.val);\n    \t\tl1=l1.next;\n    \t\tit=it.next;\n    \t}\n\n    \twhile(l2!=null){\n    \t\tit.next=new ListNode(l2.val);\n    \t\tl2=l2.next;\n    \t\tit=it.next;\n    \t}\n    \treturn head.next;\n    }\n}\n```","source":"_posts/leetcode23.md","raw":"---\ntitle: Merge k Sorted Lists\ndate: 2016-06-16 12:21:39\ntags: [leetcode]\n---\n## Leetcode: Merge k Sorted Lists\nMerge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.\n## 题意\n将k个有序链表合并成一个有序链表，分析算法的复杂度。\n## 集体思路\n对于k个有序链表的合并，使用分而治之的思路，先让两个链表合并得到一个新链表，再将新链表进行合并。算法的时间复杂度是log(k)\\*(k\\*n)，n表示链表长度的平均值。空间复杂度为O(1)。提交后在leetcode上运行时间在前30%。\n#### 代码实现\n```java\n/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n    \treturn merge(lists,0,lists.length-1);\n    }\n    \n    public ListNode merge(ListNode[] lists,int a,int b){\n    \tif(lists.length==0) return null;\n    \tif(a<b){\n    \t\tint mid=(a+b)/2;\n    \t\tListNode l1=merge(lists,a,mid);\n    \t\tListNode l2=merge(lists,mid+1,b);\n    \t\treturn mergerTwo(l1,l2);\n    \t}else \n    \t\treturn lists[a];\n    }\n    \n    public ListNode mergerTwo(ListNode l1,ListNode l2){\n    \tListNode head=new ListNode(0);\n    \tListNode it=head;\n    \twhile(l1!=null&&l2!=null){\n    \t\tint min;\n    \t\tif(l1.val>l2.val){\n    \t\t\tmin=l2.val;\n    \t\t\tl2=l2.next;\n    \t\t}else{\n    \t\t\tmin=l1.val;\n    \t\t\tl1=l1.next;\n    \t\t}\n    \t\tit.next=new ListNode(min);\n    \t\tit=it.next;\n    \t}\n    \twhile(l1!=null){\n    \t\tit.next=new ListNode(l1.val);\n    \t\tl1=l1.next;\n    \t\tit=it.next;\n    \t}\n\n    \twhile(l2!=null){\n    \t\tit.next=new ListNode(l2.val);\n    \t\tl2=l2.next;\n    \t\tit=it.next;\n    \t}\n    \treturn head.next;\n    }\n}\n```","slug":"leetcode23","published":1,"updated":"2016-06-16T04:47:59.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citn1rcjf000fvcqr86bqreb2","content":"<h2 id=\"Leetcode-Merge-k-Sorted-Lists\"><a href=\"#Leetcode-Merge-k-Sorted-Lists\" class=\"headerlink\" title=\"Leetcode: Merge k Sorted Lists\"></a>Leetcode: Merge k Sorted Lists</h2><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>将k个有序链表合并成一个有序链表，分析算法的复杂度。</p>\n<h2 id=\"集体思路\"><a href=\"#集体思路\" class=\"headerlink\" title=\"集体思路\"></a>集体思路</h2><p>对于k个有序链表的合并，使用分而治之的思路，先让两个链表合并得到一个新链表，再将新链表进行合并。算法的时间复杂度是log(k)*(k*n)，n表示链表长度的平均值。空间复杂度为O(1)。提交后在leetcode上运行时间在前30%。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> merge(lists,<span class=\"number\">0</span>,lists.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">merge</span><span class=\"params\">(ListNode[] lists,<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(lists.length==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(a&lt;b)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">int</span> mid=(a+b)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    \t\tListNode l1=merge(lists,a,mid);</span><br><span class=\"line\">    \t\tListNode l2=merge(lists,mid+<span class=\"number\">1</span>,b);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> mergerTwo(l1,l2);</span><br><span class=\"line\">    \t&#125;<span class=\"keyword\">else</span> </span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> lists[a];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergerTwo</span><span class=\"params\">(ListNode l1,ListNode l2)</span></span>&#123;</span><br><span class=\"line\">    \tListNode head=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    \tListNode it=head;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(l1!=<span class=\"keyword\">null</span>&amp;&amp;l2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">int</span> min;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(l1.val&gt;l2.val)&#123;</span><br><span class=\"line\">    \t\t\tmin=l2.val;</span><br><span class=\"line\">    \t\t\tl2=l2.next;</span><br><span class=\"line\">    \t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t\t\tmin=l1.val;</span><br><span class=\"line\">    \t\t\tl1=l1.next;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tit.next=<span class=\"keyword\">new</span> ListNode(min);</span><br><span class=\"line\">    \t\tit=it.next;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(l1!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \t\tit.next=<span class=\"keyword\">new</span> ListNode(l1.val);</span><br><span class=\"line\">    \t\tl1=l1.next;</span><br><span class=\"line\">    \t\tit=it.next;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(l2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \t\tit.next=<span class=\"keyword\">new</span> ListNode(l2.val);</span><br><span class=\"line\">    \t\tl2=l2.next;</span><br><span class=\"line\">    \t\tit=it.next;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Leetcode-Merge-k-Sorted-Lists\"><a href=\"#Leetcode-Merge-k-Sorted-Lists\" class=\"headerlink\" title=\"Leetcode: Merge k Sorted Lists\"></a>Leetcode: Merge k Sorted Lists</h2><p>Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>将k个有序链表合并成一个有序链表，分析算法的复杂度。</p>\n<h2 id=\"集体思路\"><a href=\"#集体思路\" class=\"headerlink\" title=\"集体思路\"></a>集体思路</h2><p>对于k个有序链表的合并，使用分而治之的思路，先让两个链表合并得到一个新链表，再将新链表进行合并。算法的时间复杂度是log(k)*(k*n)，n表示链表长度的平均值。空间复杂度为O(1)。提交后在leetcode上运行时间在前30%。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Definition for singly-linked list.</span><br><span class=\"line\"> * public class ListNode &#123;</span><br><span class=\"line\"> *     int val;</span><br><span class=\"line\"> *     ListNode next;</span><br><span class=\"line\"> *     ListNode(int x) &#123; val = x; &#125;</span><br><span class=\"line\"> * &#125;</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> </span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> merge(lists,<span class=\"number\">0</span>,lists.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">merge</span><span class=\"params\">(ListNode[] lists,<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(lists.length==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(a&lt;b)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">int</span> mid=(a+b)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    \t\tListNode l1=merge(lists,a,mid);</span><br><span class=\"line\">    \t\tListNode l2=merge(lists,mid+<span class=\"number\">1</span>,b);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> mergerTwo(l1,l2);</span><br><span class=\"line\">    \t&#125;<span class=\"keyword\">else</span> </span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> lists[a];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">mergerTwo</span><span class=\"params\">(ListNode l1,ListNode l2)</span></span>&#123;</span><br><span class=\"line\">    \tListNode head=<span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>);</span><br><span class=\"line\">    \tListNode it=head;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(l1!=<span class=\"keyword\">null</span>&amp;&amp;l2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">int</span> min;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(l1.val&gt;l2.val)&#123;</span><br><span class=\"line\">    \t\t\tmin=l2.val;</span><br><span class=\"line\">    \t\t\tl2=l2.next;</span><br><span class=\"line\">    \t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    \t\t\tmin=l1.val;</span><br><span class=\"line\">    \t\t\tl1=l1.next;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tit.next=<span class=\"keyword\">new</span> ListNode(min);</span><br><span class=\"line\">    \t\tit=it.next;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(l1!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \t\tit.next=<span class=\"keyword\">new</span> ListNode(l1.val);</span><br><span class=\"line\">    \t\tl1=l1.next;</span><br><span class=\"line\">    \t\tit=it.next;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(l2!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \t\tit.next=<span class=\"keyword\">new</span> ListNode(l2.val);</span><br><span class=\"line\">    \t\tl2=l2.next;</span><br><span class=\"line\">    \t\tit=it.next;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Substring with Concatenation of All Words","date":"2016-06-16T06:36:58.000Z","_content":"## Leetcode:Substring with Concatenation of All Words\nYou are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.  \nFor example, given:  \ns: \"barfoothefoobarman\"  \nwords: [\"foo\", \"bar\"]  \nYou should return the indices: [0,9].\n(order does not matter).\n## 题意\n输入一个字符串s和一个字母等长的字符串数组words，在s中找到一个由words中所有单词组成的子串的起始位置，且words的单词只在子串中出现一次，并且中间也没有插入其他字符。  \n输入:  s:\"barfoothefoobarman\"和words:[\"foo\", \"bar\"]  \ns中符合条件的子串为barfoo和foobar，这两个子串的初始下标分别为0和9。\n## 解题思路\n&emsp;&emsp;题目中有一个很重要的点就是words中的单词都是等长的，针对这一点，从s串中截取一定长度的串，以map作为辅助检查这个子串是不是符合条件的串。按照这个思路写完代码后发现会超时，因为其中包含了太多的多余比较，例如示例中比较到第三个位置即foothe时，此时已知the已经不包含在words中，只要包含the的都一定不符合条件，希望直接能跳到第9的位置来比较foobar。  \n**优化思路：**  \n&emsp;&emsp;截取到子串后将其从后到前比较，如果检查到有不符合条件的单词，那么之前的单词也一定不符合条件，可以直接将前一个检查点作为截取字符串的开头：在检查到thefoo时，从后到前检比较，foo符合，the不符合，就直接从foo位置开始继续检查。  \n**注意：**  \n&emsp;&emsp;为了确保没有遗漏，还需要对字符串进行移位检查，移位范围为单词的长度。例如\"aaa·aaa·b\"和[\"aa\",\"aa\",\"ab\"]，在检查完0-6子串后，还需要检查1-7子串，两次检查较小值作为下次截取字符串的开头。  \n&emsp;&emsp;代码在leetcode上提交后运行速度在前5%左右。\n#### 代码实现\n```java\npublic class Solution {\n\tList<Integer> res=new ArrayList<Integer>();\n\tMap<String, Integer> mem=new HashMap<>();\n\tint len;\n\tpublic List<Integer> findSubstring(String s, String[] words) {\n\t\tif(words.length==0)\n\t\t\treturn res;\n\t\tlen=words[0].length()*words.length;\n    \tfor(String i:words){\n    \t\tif(mem.containsKey(i))\n    \t\t\tmem.put(i, mem.get(i)+1);\n    \t\telse\n    \t\t\tmem.put(i, 1);\n    \t}\n    \tint pos=0;\n    \twhile(true){\n    \t\tpos=find(s,pos,words);\n    \t\tif(pos+len>s.length()){\n    \t\t\treturn res;\n    \t\t}\n    \t}\n\t}\n  \n\tint find(String s,int index,String[] words){\n    \tMap<String, Integer> map=new HashMap<>();\n\t\tint clen=words[0].length();\n\t\t//min是函数返回值，代表下次截取字符串的开头位置\n\t\tint min=len+index;\n\t\t//移位检查\n\t\tfor(int i=0;i<clen;i++){\n\t\t\tmap.clear();\n\t\t\tfor(int j=words.length-1;j>=0;j--){\n\t\t\t    //left从后往前，index表示字符串开头，i表示偏移\n\t\t\t\tint left=index+i+j*clen,right=left+clen;\n\t\t\t\tif(right>s.length())\n\t\t\t\t\treturn min;\n\t\t\t\tString str=s.substring(left,right);\n        \t\tif(!mem.containsKey(str)){\n        \t\t    //min的值取比较较小值\n        \t\t\tmin=Math.min(min, right);\n    \t\t\t\tbreak;\n        \t\t}\n        \t\tif(!map.containsKey(str))\n        \t\t\tmap.put(str, 1);\n        \t\telse\n        \t\t\tmap.put(str, map.get(str)+1);\n        \t\tif(mem.get(str)<map.get(str)){\n        \t\t\tmin=Math.min(min, right);\n        \t\t\tbreak;\n        \t\t}\n        \t\tif(j==0){\n        \t\t\tres.add(index+i);\n        \t\t\t//如果成功匹配，那么后移一个单词\n        \t\t\tmin=Math.min(index+clen, min);\n        \t\t}\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n```","source":"_posts/leetcode30.md","raw":"---\ntitle: Substring with Concatenation of All Words\ndate: 2016-06-16 14:36:58\ntags: [leetcode]\n---\n## Leetcode:Substring with Concatenation of All Words\nYou are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.  \nFor example, given:  \ns: \"barfoothefoobarman\"  \nwords: [\"foo\", \"bar\"]  \nYou should return the indices: [0,9].\n(order does not matter).\n## 题意\n输入一个字符串s和一个字母等长的字符串数组words，在s中找到一个由words中所有单词组成的子串的起始位置，且words的单词只在子串中出现一次，并且中间也没有插入其他字符。  \n输入:  s:\"barfoothefoobarman\"和words:[\"foo\", \"bar\"]  \ns中符合条件的子串为barfoo和foobar，这两个子串的初始下标分别为0和9。\n## 解题思路\n&emsp;&emsp;题目中有一个很重要的点就是words中的单词都是等长的，针对这一点，从s串中截取一定长度的串，以map作为辅助检查这个子串是不是符合条件的串。按照这个思路写完代码后发现会超时，因为其中包含了太多的多余比较，例如示例中比较到第三个位置即foothe时，此时已知the已经不包含在words中，只要包含the的都一定不符合条件，希望直接能跳到第9的位置来比较foobar。  \n**优化思路：**  \n&emsp;&emsp;截取到子串后将其从后到前比较，如果检查到有不符合条件的单词，那么之前的单词也一定不符合条件，可以直接将前一个检查点作为截取字符串的开头：在检查到thefoo时，从后到前检比较，foo符合，the不符合，就直接从foo位置开始继续检查。  \n**注意：**  \n&emsp;&emsp;为了确保没有遗漏，还需要对字符串进行移位检查，移位范围为单词的长度。例如\"aaa·aaa·b\"和[\"aa\",\"aa\",\"ab\"]，在检查完0-6子串后，还需要检查1-7子串，两次检查较小值作为下次截取字符串的开头。  \n&emsp;&emsp;代码在leetcode上提交后运行速度在前5%左右。\n#### 代码实现\n```java\npublic class Solution {\n\tList<Integer> res=new ArrayList<Integer>();\n\tMap<String, Integer> mem=new HashMap<>();\n\tint len;\n\tpublic List<Integer> findSubstring(String s, String[] words) {\n\t\tif(words.length==0)\n\t\t\treturn res;\n\t\tlen=words[0].length()*words.length;\n    \tfor(String i:words){\n    \t\tif(mem.containsKey(i))\n    \t\t\tmem.put(i, mem.get(i)+1);\n    \t\telse\n    \t\t\tmem.put(i, 1);\n    \t}\n    \tint pos=0;\n    \twhile(true){\n    \t\tpos=find(s,pos,words);\n    \t\tif(pos+len>s.length()){\n    \t\t\treturn res;\n    \t\t}\n    \t}\n\t}\n  \n\tint find(String s,int index,String[] words){\n    \tMap<String, Integer> map=new HashMap<>();\n\t\tint clen=words[0].length();\n\t\t//min是函数返回值，代表下次截取字符串的开头位置\n\t\tint min=len+index;\n\t\t//移位检查\n\t\tfor(int i=0;i<clen;i++){\n\t\t\tmap.clear();\n\t\t\tfor(int j=words.length-1;j>=0;j--){\n\t\t\t    //left从后往前，index表示字符串开头，i表示偏移\n\t\t\t\tint left=index+i+j*clen,right=left+clen;\n\t\t\t\tif(right>s.length())\n\t\t\t\t\treturn min;\n\t\t\t\tString str=s.substring(left,right);\n        \t\tif(!mem.containsKey(str)){\n        \t\t    //min的值取比较较小值\n        \t\t\tmin=Math.min(min, right);\n    \t\t\t\tbreak;\n        \t\t}\n        \t\tif(!map.containsKey(str))\n        \t\t\tmap.put(str, 1);\n        \t\telse\n        \t\t\tmap.put(str, map.get(str)+1);\n        \t\tif(mem.get(str)<map.get(str)){\n        \t\t\tmin=Math.min(min, right);\n        \t\t\tbreak;\n        \t\t}\n        \t\tif(j==0){\n        \t\t\tres.add(index+i);\n        \t\t\t//如果成功匹配，那么后移一个单词\n        \t\t\tmin=Math.min(index+clen, min);\n        \t\t}\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n```","slug":"leetcode30","published":1,"updated":"2016-06-16T07:26:30.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citn1rcji000gvcqrgytvzost","content":"<h2 id=\"Leetcode-Substring-with-Concatenation-of-All-Words\"><a href=\"#Leetcode-Substring-with-Concatenation-of-All-Words\" class=\"headerlink\" title=\"Leetcode:Substring with Concatenation of All Words\"></a>Leetcode:Substring with Concatenation of All Words</h2><p>You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.<br>For example, given:<br>s: “barfoothefoobarman”<br>words: [“foo”, “bar”]<br>You should return the indices: [0,9].<br>(order does not matter).</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>输入一个字符串s和一个字母等长的字符串数组words，在s中找到一个由words中所有单词组成的子串的起始位置，且words的单词只在子串中出现一次，并且中间也没有插入其他字符。<br>输入:  s:”barfoothefoobarman”和words:[“foo”, “bar”]<br>s中符合条件的子串为barfoo和foobar，这两个子串的初始下标分别为0和9。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;&emsp;题目中有一个很重要的点就是words中的单词都是等长的，针对这一点，从s串中截取一定长度的串，以map作为辅助检查这个子串是不是符合条件的串。按照这个思路写完代码后发现会超时，因为其中包含了太多的多余比较，例如示例中比较到第三个位置即foothe时，此时已知the已经不包含在words中，只要包含the的都一定不符合条件，希望直接能跳到第9的位置来比较foobar。<br><strong>优化思路：</strong><br>&emsp;&emsp;截取到子串后将其从后到前比较，如果检查到有不符合条件的单词，那么之前的单词也一定不符合条件，可以直接将前一个检查点作为截取字符串的开头：在检查到thefoo时，从后到前检比较，foo符合，the不符合，就直接从foo位置开始继续检查。<br><strong>注意：</strong><br>&emsp;&emsp;为了确保没有遗漏，还需要对字符串进行移位检查，移位范围为单词的长度。例如”aaa·aaa·b”和[“aa”,”aa”,”ab”]，在检查完0-6子串后，还需要检查1-7子串，两次检查较小值作为下次截取字符串的开头。<br>&emsp;&emsp;代码在leetcode上提交后运行速度在前5%左右。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;Integer&gt; res=<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\tMap&lt;String, Integer&gt; mem=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">findSubstring</span><span class=\"params\">(String s, String[] words)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(words.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t\tlen=words[<span class=\"number\">0</span>].length()*words.length;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(String i:words)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(mem.containsKey(i))</span><br><span class=\"line\">    \t\t\tmem.put(i, mem.get(i)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">    \t\t\tmem.put(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> pos=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">    \t\tpos=find(s,pos,words);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(pos+len&gt;s.length())&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(String s,<span class=\"keyword\">int</span> index,String[] words)</span></span>&#123;</span><br><span class=\"line\">    \tMap&lt;String, Integer&gt; map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> clen=words[<span class=\"number\">0</span>].length();</span><br><span class=\"line\">\t\t<span class=\"comment\">//min是函数返回值，代表下次截取字符串的开头位置</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min=len+index;</span><br><span class=\"line\">\t\t<span class=\"comment\">//移位检查</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;clen;i++)&#123;</span><br><span class=\"line\">\t\t\tmap.clear();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=words.length-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">\t\t\t    <span class=\"comment\">//left从后往前，index表示字符串开头，i表示偏移</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> left=index+i+j*clen,right=left+clen;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(right&gt;s.length())</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> min;</span><br><span class=\"line\">\t\t\t\tString str=s.substring(left,right);</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(!mem.containsKey(str))&#123;</span><br><span class=\"line\">        \t\t    <span class=\"comment\">//min的值取比较较小值</span></span><br><span class=\"line\">        \t\t\tmin=Math.min(min, right);</span><br><span class=\"line\">    \t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(!map.containsKey(str))</span><br><span class=\"line\">        \t\t\tmap.put(str, <span class=\"number\">1</span>);</span><br><span class=\"line\">        \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">        \t\t\tmap.put(str, map.get(str)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(mem.get(str)&lt;map.get(str))&#123;</span><br><span class=\"line\">        \t\t\tmin=Math.min(min, right);</span><br><span class=\"line\">        \t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        \t\t\tres.add(index+i);</span><br><span class=\"line\">        \t\t\t<span class=\"comment\">//如果成功匹配，那么后移一个单词</span></span><br><span class=\"line\">        \t\t\tmin=Math.min(index+clen, min);</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> min;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Leetcode-Substring-with-Concatenation-of-All-Words\"><a href=\"#Leetcode-Substring-with-Concatenation-of-All-Words\" class=\"headerlink\" title=\"Leetcode:Substring with Concatenation of All Words\"></a>Leetcode:Substring with Concatenation of All Words</h2><p>You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.<br>For example, given:<br>s: “barfoothefoobarman”<br>words: [“foo”, “bar”]<br>You should return the indices: [0,9].<br>(order does not matter).</p>\n<h2 id=\"题意\"><a href=\"#题意\" class=\"headerlink\" title=\"题意\"></a>题意</h2><p>输入一个字符串s和一个字母等长的字符串数组words，在s中找到一个由words中所有单词组成的子串的起始位置，且words的单词只在子串中出现一次，并且中间也没有插入其他字符。<br>输入:  s:”barfoothefoobarman”和words:[“foo”, “bar”]<br>s中符合条件的子串为barfoo和foobar，这两个子串的初始下标分别为0和9。</p>\n<h2 id=\"解题思路\"><a href=\"#解题思路\" class=\"headerlink\" title=\"解题思路\"></a>解题思路</h2><p>&emsp;&emsp;题目中有一个很重要的点就是words中的单词都是等长的，针对这一点，从s串中截取一定长度的串，以map作为辅助检查这个子串是不是符合条件的串。按照这个思路写完代码后发现会超时，因为其中包含了太多的多余比较，例如示例中比较到第三个位置即foothe时，此时已知the已经不包含在words中，只要包含the的都一定不符合条件，希望直接能跳到第9的位置来比较foobar。<br><strong>优化思路：</strong><br>&emsp;&emsp;截取到子串后将其从后到前比较，如果检查到有不符合条件的单词，那么之前的单词也一定不符合条件，可以直接将前一个检查点作为截取字符串的开头：在检查到thefoo时，从后到前检比较，foo符合，the不符合，就直接从foo位置开始继续检查。<br><strong>注意：</strong><br>&emsp;&emsp;为了确保没有遗漏，还需要对字符串进行移位检查，移位范围为单词的长度。例如”aaa·aaa·b”和[“aa”,”aa”,”ab”]，在检查完0-6子串后，还需要检查1-7子串，两次检查较小值作为下次截取字符串的开头。<br>&emsp;&emsp;代码在leetcode上提交后运行速度在前5%左右。</p>\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">\tList&lt;Integer&gt; res=<span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">\tMap&lt;String, Integer&gt; mem=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> len;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">findSubstring</span><span class=\"params\">(String s, String[] words)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(words.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t\tlen=words[<span class=\"number\">0</span>].length()*words.length;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(String i:words)&#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(mem.containsKey(i))</span><br><span class=\"line\">    \t\t\tmem.put(i, mem.get(i)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">    \t\t\tmem.put(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> pos=<span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">    \t\tpos=find(s,pos,words);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(pos+len&gt;s.length())&#123;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(String s,<span class=\"keyword\">int</span> index,String[] words)</span></span>&#123;</span><br><span class=\"line\">    \tMap&lt;String, Integer&gt; map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> clen=words[<span class=\"number\">0</span>].length();</span><br><span class=\"line\">\t\t<span class=\"comment\">//min是函数返回值，代表下次截取字符串的开头位置</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> min=len+index;</span><br><span class=\"line\">\t\t<span class=\"comment\">//移位检查</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;clen;i++)&#123;</span><br><span class=\"line\">\t\t\tmap.clear();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=words.length-<span class=\"number\">1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">\t\t\t    <span class=\"comment\">//left从后往前，index表示字符串开头，i表示偏移</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> left=index+i+j*clen,right=left+clen;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(right&gt;s.length())</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> min;</span><br><span class=\"line\">\t\t\t\tString str=s.substring(left,right);</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(!mem.containsKey(str))&#123;</span><br><span class=\"line\">        \t\t    <span class=\"comment\">//min的值取比较较小值</span></span><br><span class=\"line\">        \t\t\tmin=Math.min(min, right);</span><br><span class=\"line\">    \t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(!map.containsKey(str))</span><br><span class=\"line\">        \t\t\tmap.put(str, <span class=\"number\">1</span>);</span><br><span class=\"line\">        \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">        \t\t\tmap.put(str, map.get(str)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(mem.get(str)&lt;map.get(str))&#123;</span><br><span class=\"line\">        \t\t\tmin=Math.min(min, right);</span><br><span class=\"line\">        \t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span>(j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        \t\t\tres.add(index+i);</span><br><span class=\"line\">        \t\t\t<span class=\"comment\">//如果成功匹配，那么后移一个单词</span></span><br><span class=\"line\">        \t\t\tmin=Math.min(index+clen, min);</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> min;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"citn1rchq0003vcqrpy4vwux2","tag_id":"citn1rchy0005vcqrkx2kxmey","_id":"citn1rcig0009vcqrsk497vp7"},{"post_id":"citn1rchu0004vcqrt5vfvry2","tag_id":"citn1rchy0005vcqrkx2kxmey","_id":"citn1rcij000bvcqroa0le25b"},{"post_id":"citn1rci60006vcqrghic1ceg","tag_id":"citn1rchy0005vcqrkx2kxmey","_id":"citn1rcil000dvcqrc4z6g2p2"},{"post_id":"citn1rci80007vcqrc1uos27e","tag_id":"citn1rcik000cvcqri4nmrck2","_id":"citn1rcin000evcqrt7g0rhq9"},{"post_id":"citn1rcjf000fvcqr86bqreb2","tag_id":"citn1rchy0005vcqrkx2kxmey","_id":"citn1rcjl000hvcqr500vnisr"},{"post_id":"citn1rcji000gvcqrgytvzost","tag_id":"citn1rchy0005vcqrkx2kxmey","_id":"citn1rcjm000ivcqri52glxu5"}],"Tag":[{"name":"leetcode","_id":"citn1rchy0005vcqrkx2kxmey"},{"name":"games","_id":"citn1rcik000cvcqri4nmrck2"}]}}